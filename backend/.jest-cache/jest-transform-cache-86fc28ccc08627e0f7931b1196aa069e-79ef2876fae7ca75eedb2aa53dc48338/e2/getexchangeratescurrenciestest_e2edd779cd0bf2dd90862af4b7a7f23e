7fbf2f94dffc1165af69e3a1a4203c70
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe("GET /public/exchange-rates/currencies", () => {
    it("should get currency list", async () => {
        knex.table = () => ({
            select: () => [
                { currency: "EUR" },
                { currency: "USD" },
                { currency: "JPY" },
            ],
        });
        const exchageRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates/currencies",
        });
        expect(exchageRates.statusCode).toBe(200);
        expect(JSON.parse(exchageRates.body)).toEqual({ data: ["EUR", "USD", "JPY"] });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvYmFja2VuZC90ZXN0L3VuaXQvcm91dGVzL3B1YmxpYy9nZXQtZXhjaGFuZ2UtcmF0ZXMtY3VycmVuY2llcy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBZUEsSUFBSSxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7SUFDcEQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFoQkgsNENBSXlCO0FBQ3pCLG9FQUFnQztBQUVoQyxJQUFJLEdBQW9CLENBQUM7QUFDekIsSUFBSSxJQUFJLEdBQUcsSUFBQSxtQ0FBMEIsR0FBRSxDQUFDO0FBRXhDLE1BQU0sVUFBVSxHQUFHLElBQUEsd0JBQUUsRUFBQyxLQUFLLEVBQUUsT0FBWSxFQUFFLE9BQVksRUFBRSxFQUFFO0lBQ3pELE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxDQUFDO0FBTUgsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ25CLEdBQUcsR0FBRyxNQUFNLElBQUEscUJBQVksR0FBRSxDQUFDO0FBQzdCLENBQUMsQ0FBQyxDQUFDO0FBRUgsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ3BCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNsQixNQUFNLElBQUEsb0JBQVcsR0FBRSxDQUFDO0FBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtJQUNyRCxFQUFFLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDWixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7Z0JBQ25CLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtnQkFDbkIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO2FBQ3BCO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ3BDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLG1DQUFtQztTQUN6QyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL2JhY2tlbmQvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmYXN0aWZ5LCB0eXBlIEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gXCJmYXN0aWZ5XCI7XG5pbXBvcnQge1xuICBnZXREZWZhdWx0S25leFBsdWdpblBhcmFtcyxcbiAgc3RhcnRUZXN0RW52LFxuICBzdG9wVGVzdEVudixcbn0gZnJvbSBcIi4uLy4uLy4uL2hlbHBlclwiO1xuaW1wb3J0IGZwIGZyb20gXCJmYXN0aWZ5LXBsdWdpblwiO1xuXG5sZXQgYXBwOiBGYXN0aWZ5SW5zdGFuY2U7XG5sZXQga25leCA9IGdldERlZmF1bHRLbmV4UGx1Z2luUGFyYW1zKCk7XG5cbmNvbnN0IGtuZXhQbHVnaW4gPSBmcChhc3luYyAoZmFzdGlmeTogYW55LCBvcHRpb25zOiBhbnkpID0+IHtcbiAgZmFzdGlmeS5kZWNvcmF0ZShcImtuZXhcIiwga25leCk7XG59KTtcblxuamVzdC5tb2NrKFwiLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva25leC1wbHVnaW5cIiwgKCkgPT4ge1xuICByZXR1cm4ga25leFBsdWdpbjtcbn0pO1xuXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICBhcHAgPSBhd2FpdCBzdGFydFRlc3RFbnYoKTtcbn0pO1xuXG5iZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgamVzdC5yZXNldEFsbE1vY2tzKCk7XG59KTtcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBzdG9wVGVzdEVudigpO1xufSk7XG5cbmRlc2NyaWJlKFwiR0VUIC9wdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvY3VycmVuY2llc1wiLCAoKSA9PiB7XG4gIGl0KFwic2hvdWxkIGdldCBjdXJyZW5jeSBsaXN0XCIsIGFzeW5jICgpID0+IHtcbiAgICBrbmV4LnRhYmxlID0gKCkgPT4gKHtcbiAgICAgIHNlbGVjdDogKCkgPT4gW1xuICAgICAgICB7IGN1cnJlbmN5OiBcIkVVUlwiIH0sXG4gICAgICAgIHsgY3VycmVuY3k6IFwiVVNEXCIgfSxcbiAgICAgICAgeyBjdXJyZW5jeTogXCJKUFlcIiB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGV4Y2hhZ2VSYXRlcyA9IGF3YWl0IGFwcC5pbmplY3Qoe1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgdXJsOiBcIi9wdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvY3VycmVuY2llc1wiLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KGV4Y2hhZ2VSYXRlcy5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KEpTT04ucGFyc2UoZXhjaGFnZVJhdGVzLmJvZHkpKS50b0VxdWFsKHsgZGF0YTogW1wiRVVSXCIsIFwiVVNEXCIsIFwiSlBZXCJdIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9