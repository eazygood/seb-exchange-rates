0c86bb663dd1d100b8ca132ff61ff82d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.populateDbWithCurrency = exports.populateDbWithExchangeRates = void 0;
const mysql_adapter_1 = require("../adapters/mysql-adapter");
const exchange_rate_repository_1 = require("../repositories/exchange-rate-repository");
const datetime_1 = require("../utils/datetime");
const currencies_repository_1 = require("../repositories/currencies-repository");
const xml_to_json_1 = __importDefault(require("../utils/xml-to-json"));
const EXCHNAGE_RATE_URL = "https://www.lb.lt/webservices/FxRates/FxRates.asmx/getCurrentFxRates";
const EXCHNAGE_RATE_BY_DATE_URL = "https://www.lb.lt/webservices/FxRates/FxRates.asmx/getFxRates";
const populateDbWithExchangeRates = async (app, date) => {
    const body = date ? `tp=EU&dt=${date}` : "tp=EU";
    const url = date ? EXCHNAGE_RATE_BY_DATE_URL : EXCHNAGE_RATE_URL;
    const response = await fetch(url, {
        headers: {
            "content-type": "application/x-www-form-urlencoded",
        },
        method: "POST",
        body,
    });
    const xml = await response.text();
    const exchangeRatesJson = (await (0, xml_to_json_1.default)(xml));
    const fxrates = exchangeRatesJson.FxRates.FxRate.map((rate) => {
        const date = rate.Dt;
        const [source, target] = rate.CcyAmt;
        const { Ccy: sourceCurreny, Amt: sourceRate } = source;
        const { Ccy: targetCurrency, Amt: targetRate } = target;
        return {
            source_currency: sourceCurreny,
            target_currency: targetCurrency,
            source_rate: sourceRate,
            target_rate: targetRate,
            exchange_date: date,
        };
    });
    const postingDate = (0, datetime_1.getDateWithoutTime)(date).toISOString();
    const defaultEurCurrency = {
        source_currency: "EUR",
        target_currency: "EUR",
        source_rate: "1",
        target_rate: "1",
        exchange_date: postingDate,
    };
    fxrates.push(defaultEurCurrency);
    const ratesToSave = {
        rates: JSON.stringify(fxrates),
        posting_date: postingDate,
    };
    await (0, mysql_adapter_1.withinTransaction)({
        app,
        callback: async () => {
            await (0, exchange_rate_repository_1.saveExchangeRates)(app, ratesToSave);
        },
    });
};
exports.populateDbWithExchangeRates = populateDbWithExchangeRates;
const populateDbWithCurrency = async (app) => {
    const response = await fetch(EXCHNAGE_RATE_URL, {
        headers: {
            "content-type": "application/x-www-form-urlencoded",
        },
        method: "POST",
        body: "tp=EU",
    });
    const xml = await response.text();
    const exchangeRatesJson = (await (0, xml_to_json_1.default)(xml));
    const currencies = exchangeRatesJson.FxRates.FxRate.map((rate) => {
        const [_, to] = rate.CcyAmt;
        const { Ccy: currency } = to;
        return {
            currency,
        };
    });
    const uniqueCurrencies = [...new Set(currencies)];
    uniqueCurrencies.push({ currency: "EUR" });
    await (0, currencies_repository_1.saveCurrencies)(app, uniqueCurrencies);
};
exports.populateDbWithCurrency = populateDbWithCurrency;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvYmFja2VuZC9zcmMvbWFuYWdlcnMvc2VlZC1tYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLDZEQUE4RDtBQUM5RCx1RkFBNkU7QUFDN0UsZ0RBQXVEO0FBQ3ZELGlGQUF1RTtBQUN2RSx1RUFBNkM7QUFHN0MsTUFBTSxpQkFBaUIsR0FDckIsc0VBQXNFLENBQUM7QUFFekUsTUFBTSx5QkFBeUIsR0FDN0IsK0RBQStELENBQUM7QUFFM0QsTUFBTSwyQkFBMkIsR0FBRyxLQUFLLEVBQzlDLEdBQW9CLEVBQ3BCLElBQWEsRUFDYixFQUFFO0lBQ0YsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDakQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7SUFFakUsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFO1FBQ2hDLE9BQU8sRUFBRTtZQUNQLGNBQWMsRUFBRSxtQ0FBbUM7U0FDcEQ7UUFDRCxNQUFNLEVBQUUsTUFBTTtRQUNkLElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxNQUFNLEdBQUcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsTUFBTSxJQUFBLHFCQUFTLEVBQUMsR0FBRyxDQUFDLENBQW9CLENBQUM7SUFFcEUsTUFBTSxPQUFPLEdBQXVCLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUN0RSxDQUFDLElBQVUsRUFBRSxFQUFFO1FBQ2IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNyQixNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckMsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUN2RCxNQUFNLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBRXhELE9BQU87WUFDTCxlQUFlLEVBQUUsYUFBYTtZQUM5QixlQUFlLEVBQUUsY0FBYztZQUMvQixXQUFXLEVBQUUsVUFBVTtZQUN2QixXQUFXLEVBQUUsVUFBVTtZQUN2QixhQUFhLEVBQUUsSUFBSTtTQUNwQixDQUFDO0lBQ0osQ0FBQyxDQUNGLENBQUM7SUFFRixNQUFNLFdBQVcsR0FBRyxJQUFBLDZCQUFrQixFQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTNELE1BQU0sa0JBQWtCLEdBQUc7UUFDekIsZUFBZSxFQUFFLEtBQUs7UUFDdEIsZUFBZSxFQUFFLEtBQUs7UUFDdEIsV0FBVyxFQUFFLEdBQUc7UUFDaEIsV0FBVyxFQUFFLEdBQUc7UUFDaEIsYUFBYSxFQUFFLFdBQVc7S0FDM0IsQ0FBQztJQUVGLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUVqQyxNQUFNLFdBQVcsR0FBRztRQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDOUIsWUFBWSxFQUFFLFdBQVc7S0FDMUIsQ0FBQztJQUVGLE1BQU0sSUFBQSxpQ0FBaUIsRUFBQztRQUN0QixHQUFHO1FBQ0gsUUFBUSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25CLE1BQU0sSUFBQSw0Q0FBaUIsRUFBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDNUMsQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQTFEVyxRQUFBLDJCQUEyQiwrQkEwRHRDO0FBRUssTUFBTSxzQkFBc0IsR0FBRyxLQUFLLEVBQUUsR0FBb0IsRUFBRSxFQUFFO0lBQ25FLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLGlCQUFpQixFQUFFO1FBQzlDLE9BQU8sRUFBRTtZQUNQLGNBQWMsRUFBRSxtQ0FBbUM7U0FDcEQ7UUFDRCxNQUFNLEVBQUUsTUFBTTtRQUNkLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxHQUFHLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQU0sSUFBQSxxQkFBUyxFQUFDLEdBQUcsQ0FBQyxDQUFvQixDQUFDO0lBRXBFLE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBVSxFQUFFLEVBQUU7UUFDckUsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzVCLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRTdCLE9BQU87WUFDTCxRQUFRO1NBQ1QsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUNsRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUUzQyxNQUFNLElBQUEsc0NBQWMsRUFBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUM5QyxDQUFDLENBQUM7QUF4QlcsUUFBQSxzQkFBc0IsMEJBd0JqQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy9iYWNrZW5kL3NyYy9tYW5hZ2Vycy9zZWVkLW1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSBcImZhc3RpZnkvdHlwZXMvaW5zdGFuY2VcIjtcbmltcG9ydCB7IHdpdGhpblRyYW5zYWN0aW9uIH0gZnJvbSBcIi4uL2FkYXB0ZXJzL215c3FsLWFkYXB0ZXJcIjtcbmltcG9ydCB7IHNhdmVFeGNoYW5nZVJhdGVzIH0gZnJvbSBcIi4uL3JlcG9zaXRvcmllcy9leGNoYW5nZS1yYXRlLXJlcG9zaXRvcnlcIjtcbmltcG9ydCB7IGdldERhdGVXaXRob3V0VGltZSB9IGZyb20gXCIuLi91dGlscy9kYXRldGltZVwiO1xuaW1wb3J0IHsgc2F2ZUN1cnJlbmNpZXMgfSBmcm9tIFwiLi4vcmVwb3NpdG9yaWVzL2N1cnJlbmNpZXMtcmVwb3NpdG9yeVwiO1xuaW1wb3J0IHhtbFRvSnNvbiBmcm9tIFwiLi4vdXRpbHMveG1sLXRvLWpzb25cIjtcbmltcG9ydCB7IEV4dGVybmFsRnhSYXRlcywgUmF0ZSwgU3R1Y3R1cmVkRnhSYXRlcyB9IGZyb20gXCIuLi9lbnRpdGllc1wiO1xuXG5jb25zdCBFWENITkFHRV9SQVRFX1VSTCA9XG4gIFwiaHR0cHM6Ly93d3cubGIubHQvd2Vic2VydmljZXMvRnhSYXRlcy9GeFJhdGVzLmFzbXgvZ2V0Q3VycmVudEZ4UmF0ZXNcIjtcblxuY29uc3QgRVhDSE5BR0VfUkFURV9CWV9EQVRFX1VSTCA9XG4gIFwiaHR0cHM6Ly93d3cubGIubHQvd2Vic2VydmljZXMvRnhSYXRlcy9GeFJhdGVzLmFzbXgvZ2V0RnhSYXRlc1wiO1xuXG5leHBvcnQgY29uc3QgcG9wdWxhdGVEYldpdGhFeGNoYW5nZVJhdGVzID0gYXN5bmMgKFxuICBhcHA6IEZhc3RpZnlJbnN0YW5jZSxcbiAgZGF0ZT86IHN0cmluZ1xuKSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBkYXRlID8gYHRwPUVVJmR0PSR7ZGF0ZX1gIDogXCJ0cD1FVVwiO1xuICBjb25zdCB1cmwgPSBkYXRlID8gRVhDSE5BR0VfUkFURV9CWV9EQVRFX1VSTCA6IEVYQ0hOQUdFX1JBVEVfVVJMO1xuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICB9LFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keSxcbiAgfSk7XG5cbiAgY29uc3QgeG1sID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICBjb25zdCBleGNoYW5nZVJhdGVzSnNvbiA9IChhd2FpdCB4bWxUb0pzb24oeG1sKSkgYXMgRXh0ZXJuYWxGeFJhdGVzO1xuXG4gIGNvbnN0IGZ4cmF0ZXM6IFN0dWN0dXJlZEZ4UmF0ZXNbXSA9IGV4Y2hhbmdlUmF0ZXNKc29uLkZ4UmF0ZXMuRnhSYXRlLm1hcChcbiAgICAocmF0ZTogUmF0ZSkgPT4ge1xuICAgICAgY29uc3QgZGF0ZSA9IHJhdGUuRHQ7XG4gICAgICBjb25zdCBbc291cmNlLCB0YXJnZXRdID0gcmF0ZS5DY3lBbXQ7XG4gICAgICBjb25zdCB7IENjeTogc291cmNlQ3VycmVueSwgQW10OiBzb3VyY2VSYXRlIH0gPSBzb3VyY2U7XG4gICAgICBjb25zdCB7IENjeTogdGFyZ2V0Q3VycmVuY3ksIEFtdDogdGFyZ2V0UmF0ZSB9ID0gdGFyZ2V0O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2VfY3VycmVuY3k6IHNvdXJjZUN1cnJlbnksXG4gICAgICAgIHRhcmdldF9jdXJyZW5jeTogdGFyZ2V0Q3VycmVuY3ksXG4gICAgICAgIHNvdXJjZV9yYXRlOiBzb3VyY2VSYXRlLFxuICAgICAgICB0YXJnZXRfcmF0ZTogdGFyZ2V0UmF0ZSxcbiAgICAgICAgZXhjaGFuZ2VfZGF0ZTogZGF0ZSxcbiAgICAgIH07XG4gICAgfVxuICApO1xuICBcbiAgY29uc3QgcG9zdGluZ0RhdGUgPSBnZXREYXRlV2l0aG91dFRpbWUoZGF0ZSkudG9JU09TdHJpbmcoKTtcblxuICBjb25zdCBkZWZhdWx0RXVyQ3VycmVuY3kgPSB7XG4gICAgc291cmNlX2N1cnJlbmN5OiBcIkVVUlwiLFxuICAgIHRhcmdldF9jdXJyZW5jeTogXCJFVVJcIixcbiAgICBzb3VyY2VfcmF0ZTogXCIxXCIsXG4gICAgdGFyZ2V0X3JhdGU6IFwiMVwiLFxuICAgIGV4Y2hhbmdlX2RhdGU6IHBvc3RpbmdEYXRlLFxuICB9O1xuXG4gIGZ4cmF0ZXMucHVzaChkZWZhdWx0RXVyQ3VycmVuY3kpO1xuXG4gIGNvbnN0IHJhdGVzVG9TYXZlID0ge1xuICAgIHJhdGVzOiBKU09OLnN0cmluZ2lmeShmeHJhdGVzKSxcbiAgICBwb3N0aW5nX2RhdGU6IHBvc3RpbmdEYXRlLFxuICB9O1xuXG4gIGF3YWl0IHdpdGhpblRyYW5zYWN0aW9uKHtcbiAgICBhcHAsXG4gICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHNhdmVFeGNoYW5nZVJhdGVzKGFwcCwgcmF0ZXNUb1NhdmUpO1xuICAgIH0sXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHBvcHVsYXRlRGJXaXRoQ3VycmVuY3kgPSBhc3luYyAoYXBwOiBGYXN0aWZ5SW5zdGFuY2UpID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChFWENITkFHRV9SQVRFX1VSTCwge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgfSxcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IFwidHA9RVVcIixcbiAgfSk7XG4gIGNvbnN0IHhtbCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgY29uc3QgZXhjaGFuZ2VSYXRlc0pzb24gPSAoYXdhaXQgeG1sVG9Kc29uKHhtbCkpIGFzIEV4dGVybmFsRnhSYXRlcztcblxuICBjb25zdCBjdXJyZW5jaWVzID0gZXhjaGFuZ2VSYXRlc0pzb24uRnhSYXRlcy5GeFJhdGUubWFwKChyYXRlOiBSYXRlKSA9PiB7XG4gICAgY29uc3QgW18sIHRvXSA9IHJhdGUuQ2N5QW10O1xuICAgIGNvbnN0IHsgQ2N5OiBjdXJyZW5jeSB9ID0gdG87XG5cbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVuY3ksXG4gICAgfTtcbiAgfSk7XG5cbiAgY29uc3QgdW5pcXVlQ3VycmVuY2llcyA9IFsuLi5uZXcgU2V0KGN1cnJlbmNpZXMpXTtcbiAgdW5pcXVlQ3VycmVuY2llcy5wdXNoKHsgY3VycmVuY3k6IFwiRVVSXCIgfSk7XG5cbiAgYXdhaXQgc2F2ZUN1cnJlbmNpZXMoYXBwLCB1bmlxdWVDdXJyZW5jaWVzKTtcbn07XG4iXSwidmVyc2lvbiI6M30=