47ea77f567e022fa5f1577287619b00b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExchangeRatesCurrencies = exports.getExchangeRatesByCurrency = exports.getExchangeRates = void 0;
const entities_1 = require("../../entities");
const fxrate_manager_1 = require("../../managers/fxrate-manager");
const currencies_repository_1 = require("../../repositories/currencies-repository");
exports.getExchangeRates = {
    method: "GET",
    url: "/exchange-rates",
    schema: {
        querystring: entities_1.ExchangeRatesQuerySchema,
    },
    async handler(req, reply) {
        const fxRates = await (0, fxrate_manager_1.getFxRates)(req.server, req.query.latest);
        reply.code(200).send({ data: fxRates, size: fxRates.length });
    },
};
exports.getExchangeRatesByCurrency = {
    method: "GET",
    url: "/exchange-rates/:currency",
    schema: {
        params: entities_1.ExchangeRateCurrencyParamSchema,
    },
    async handler(req, reply) {
        if (!req.params.currency) {
            return reply.code(404).send({ data: [], status: false });
        }
        const fxRates = await (0, fxrate_manager_1.getFxRatesByCurrency)(req.server, req.params.currency);
        reply.code(200).send({ data: fxRates, size: fxRates.length });
    },
};
exports.getExchangeRatesCurrencies = {
    method: "GET",
    url: "/exchange-rates/currencies",
    async handler(req, reply) {
        const currencies = await (0, currencies_repository_1.getCurrencies)(req.server);
        reply.code(200).send({ data: currencies });
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvYmFja2VuZC9zcmMvcm91dGVzL3B1YmxpYy9leGNoYW5nZS1yYXRlcy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FNd0I7QUFDeEIsa0VBR3VDO0FBQ3ZDLG9GQUF5RTtBQUU1RCxRQUFBLGdCQUFnQixHQUErQztJQUMxRSxNQUFNLEVBQUUsS0FBSztJQUNiLEdBQUcsRUFBRSxpQkFBaUI7SUFDdEIsTUFBTSxFQUFFO1FBQ04sV0FBVyxFQUFFLG1DQUF3QjtLQUN0QztJQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUs7UUFDdEIsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLDJCQUFVLEVBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9ELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDaEUsQ0FBQztDQUNGLENBQUM7QUFFVyxRQUFBLDBCQUEwQixHQUVsQztJQUNILE1BQU0sRUFBRSxLQUFLO0lBQ2IsR0FBRyxFQUFFLDJCQUEyQjtJQUNoQyxNQUFNLEVBQUU7UUFDTixNQUFNLEVBQUUsMENBQStCO0tBQ3hDO0lBQ0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSztRQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN6QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLHFDQUFvQixFQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU1RSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Q0FDRixDQUFDO0FBRVcsUUFBQSwwQkFBMEIsR0FBYztJQUNuRCxNQUFNLEVBQUUsS0FBSztJQUNiLEdBQUcsRUFBRSw0QkFBNEI7SUFDakMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSztRQUN0QixNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUEscUNBQWEsRUFBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0YsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy9iYWNrZW5kL3NyYy9yb3V0ZXMvcHVibGljL2V4Y2hhbmdlLXJhdGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEV4Y2hhbmdlUmF0ZUN1cnJlbmN5UGFyYW0sXG4gIEV4Y2hhbmdlUmF0ZUN1cnJlbmN5UGFyYW1TY2hlbWEsXG4gIEV4Y2hhbmdlUmF0ZXNRdWVyeSxcbiAgRXhjaGFuZ2VSYXRlc1F1ZXJ5U2NoZW1hLFxuICBSb3V0ZSxcbn0gZnJvbSBcIi4uLy4uL2VudGl0aWVzXCI7XG5pbXBvcnQge1xuICBnZXRGeFJhdGVzLFxuICBnZXRGeFJhdGVzQnlDdXJyZW5jeSxcbn0gZnJvbSBcIi4uLy4uL21hbmFnZXJzL2Z4cmF0ZS1tYW5hZ2VyXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW5jaWVzIH0gZnJvbSBcIi4uLy4uL3JlcG9zaXRvcmllcy9jdXJyZW5jaWVzLXJlcG9zaXRvcnlcIjtcblxuZXhwb3J0IGNvbnN0IGdldEV4Y2hhbmdlUmF0ZXM6IFJvdXRlPHsgUXVlcnlzdHJpbmc6IEV4Y2hhbmdlUmF0ZXNRdWVyeSB9PiA9IHtcbiAgbWV0aG9kOiBcIkdFVFwiLFxuICB1cmw6IFwiL2V4Y2hhbmdlLXJhdGVzXCIsXG4gIHNjaGVtYToge1xuICAgIHF1ZXJ5c3RyaW5nOiBFeGNoYW5nZVJhdGVzUXVlcnlTY2hlbWEsXG4gIH0sXG4gIGFzeW5jIGhhbmRsZXIocmVxLCByZXBseSkge1xuICAgIGNvbnN0IGZ4UmF0ZXMgPSBhd2FpdCBnZXRGeFJhdGVzKHJlcS5zZXJ2ZXIsIHJlcS5xdWVyeS5sYXRlc3QpO1xuXG4gICAgcmVwbHkuY29kZSgyMDApLnNlbmQoeyBkYXRhOiBmeFJhdGVzLCBzaXplOiBmeFJhdGVzLmxlbmd0aCB9KTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFeGNoYW5nZVJhdGVzQnlDdXJyZW5jeTogUm91dGU8e1xuICBQYXJhbXM6IEV4Y2hhbmdlUmF0ZUN1cnJlbmN5UGFyYW07XG59PiA9IHtcbiAgbWV0aG9kOiBcIkdFVFwiLFxuICB1cmw6IFwiL2V4Y2hhbmdlLXJhdGVzLzpjdXJyZW5jeVwiLFxuICBzY2hlbWE6IHtcbiAgICBwYXJhbXM6IEV4Y2hhbmdlUmF0ZUN1cnJlbmN5UGFyYW1TY2hlbWEsXG4gIH0sXG4gIGFzeW5jIGhhbmRsZXIocmVxLCByZXBseSkge1xuICAgIGlmICghcmVxLnBhcmFtcy5jdXJyZW5jeSkge1xuICAgICAgcmV0dXJuIHJlcGx5LmNvZGUoNDA0KS5zZW5kKHsgZGF0YTogW10sIHN0YXR1czogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZnhSYXRlcyA9IGF3YWl0IGdldEZ4UmF0ZXNCeUN1cnJlbmN5KHJlcS5zZXJ2ZXIsIHJlcS5wYXJhbXMuY3VycmVuY3kpO1xuXG4gICAgcmVwbHkuY29kZSgyMDApLnNlbmQoeyBkYXRhOiBmeFJhdGVzLCBzaXplOiBmeFJhdGVzLmxlbmd0aCB9KTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFeGNoYW5nZVJhdGVzQ3VycmVuY2llczogUm91dGU8e30+ID0ge1xuICBtZXRob2Q6IFwiR0VUXCIsXG4gIHVybDogXCIvZXhjaGFuZ2UtcmF0ZXMvY3VycmVuY2llc1wiLFxuICBhc3luYyBoYW5kbGVyKHJlcSwgcmVwbHkpIHtcbiAgICBjb25zdCBjdXJyZW5jaWVzID0gYXdhaXQgZ2V0Q3VycmVuY2llcyhyZXEuc2VydmVyKTtcblxuICAgIHJlcGx5LmNvZGUoMjAwKS5zZW5kKHsgZGF0YTogY3VycmVuY2llcyB9KTtcbiAgfSxcbn07XG4iXSwidmVyc2lvbiI6M30=