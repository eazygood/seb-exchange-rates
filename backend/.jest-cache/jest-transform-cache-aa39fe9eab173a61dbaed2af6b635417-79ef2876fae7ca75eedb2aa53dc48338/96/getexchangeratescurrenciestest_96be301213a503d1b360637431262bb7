a9f5eb9077ac1e0f510297ebc3df76a8
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe("GET public/exchange-rates/currencies", () => {
    it.only("should get currency list", async () => {
        knex.table = () => ({
            select: () => [
                { currency: "EUR" },
                { currency: "USD" },
                { currency: "JPY" },
            ],
        });
        const exchageRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates/currencies",
        });
        expect(exchageRates.statusCode).toBe(200);
        expect(exchageRates.body).toEqual({ data: ["EUR", "USD", "JPY"] });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQWVBLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBaEJILDRDQUl5QjtBQUN6QixvRUFBZ0M7QUFFaEMsSUFBSSxHQUFvQixDQUFDO0FBQ3pCLElBQUksSUFBSSxHQUFHLElBQUEsbUNBQTBCLEdBQUUsQ0FBQztBQUV4QyxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFFLEVBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFZLEVBQUUsRUFBRTtJQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUMsQ0FBQztBQU1ILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQixHQUFHLEdBQUcsTUFBTSxJQUFBLHFCQUFZLEdBQUUsQ0FBQztBQUM3QixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDcEQsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDbEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNaLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtnQkFDbkIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO2dCQUNuQixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7YUFDcEI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDcEMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsbUNBQW1DO1NBQ3pDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy90ZXN0L3VuaXQvcm91dGVzL3B1YmxpYy9nZXQtZXhjaGFuZ2UtcmF0ZXMtY3VycmVuY2llcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZhc3RpZnksIHR5cGUgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSBcImZhc3RpZnlcIjtcbmltcG9ydCB7XG4gIGdldERlZmF1bHRLbmV4UGx1Z2luUGFyYW1zLFxuICBzdGFydFRlc3RFbnYsXG4gIHN0b3BUZXN0RW52LFxufSBmcm9tIFwiLi4vLi4vLi4vaGVscGVyXCI7XG5pbXBvcnQgZnAgZnJvbSBcImZhc3RpZnktcGx1Z2luXCI7XG5cbmxldCBhcHA6IEZhc3RpZnlJbnN0YW5jZTtcbmxldCBrbmV4ID0gZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMoKTtcblxuY29uc3Qga25leFBsdWdpbiA9IGZwKGFzeW5jIChmYXN0aWZ5OiBhbnksIG9wdGlvbnM6IGFueSkgPT4ge1xuICBmYXN0aWZ5LmRlY29yYXRlKFwia25leFwiLCBrbmV4KTtcbn0pO1xuXG5qZXN0Lm1vY2soXCIuLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9rbmV4LXBsdWdpblwiLCAoKSA9PiB7XG4gIHJldHVybiBrbmV4UGx1Z2luO1xufSk7XG5cbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gIGFwcCA9IGF3YWl0IHN0YXJ0VGVzdEVudigpO1xufSk7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHN0b3BUZXN0RW52KCk7XG59KTtcblxuZGVzY3JpYmUoXCJHRVQgcHVibGljL2V4Y2hhbmdlLXJhdGVzL2N1cnJlbmNpZXNcIiwgKCkgPT4ge1xuICBpdC5vbmx5KFwic2hvdWxkIGdldCBjdXJyZW5jeSBsaXN0XCIsIGFzeW5jICgpID0+IHtcbiAgICBrbmV4LnRhYmxlID0gKCkgPT4gKHtcbiAgICAgIHNlbGVjdDogKCkgPT4gW1xuICAgICAgICB7IGN1cnJlbmN5OiBcIkVVUlwiIH0sXG4gICAgICAgIHsgY3VycmVuY3k6IFwiVVNEXCIgfSxcbiAgICAgICAgeyBjdXJyZW5jeTogXCJKUFlcIiB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGV4Y2hhZ2VSYXRlcyA9IGF3YWl0IGFwcC5pbmplY3Qoe1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgdXJsOiBcIi9wdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvY3VycmVuY2llc1wiLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KGV4Y2hhZ2VSYXRlcy5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KGV4Y2hhZ2VSYXRlcy5ib2R5KS50b0VxdWFsKHsgZGF0YTogW1wiRVVSXCIsIFwiVVNEXCIsIFwiSlBZXCJdIH0pO1xuICAgIGNvbnNvbGUubG9nKGV4Y2hhZ2VSYXRlcy5zdGF0dXNDb2RlKTtcbiAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuYm9keSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=