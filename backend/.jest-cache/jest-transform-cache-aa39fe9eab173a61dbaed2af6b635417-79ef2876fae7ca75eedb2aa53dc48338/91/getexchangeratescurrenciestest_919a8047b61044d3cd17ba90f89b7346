2a1b6614e471dfe715f2750fca90d4bb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./src/plugins/knex-plugin', (() => {
    return knexPlugin;
}));
const helper_1 = require("../../../helper");
let app;
const fp = require('fastify-plugin');
const knexPlugin = fp(async (fastify, options) => {
    console.log(options);
    const knex = {
        raw: jest.fn(),
        destroy: jest.fn(),
        migrate: {
            latest: jest.fn(),
        },
        table: () => ({
            select: jest.fn(),
        })
    };
    fastify.decorate('knex', knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('GET public/exchange-rates/currencies', () => {
    it.only('should get currency list', async () => {
        const exchageRates = await app.inject({
            method: 'GET',
            url: '/public/exchange-rates/currencies',
        });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQXNCQSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUMsR0FBRyxFQUFFO0lBQzNDLE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUF2QkosNENBQTREO0FBRTVELElBQUksR0FBb0IsQ0FBQztBQUV6QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNyQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHO1FBQ1QsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixPQUFPLEVBQUU7WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUNwQjtRQUNELEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDcEIsQ0FBQztLQUNMLENBQUE7SUFFRCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQTtBQU1GLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNqQixHQUFHLEdBQUcsTUFBTSxJQUFBLHFCQUFZLEdBQUUsQ0FBQztBQUUvQixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNsQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUE7QUFFRixRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDaEIsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQztBQUN4QixDQUFDLENBQUMsQ0FBQTtBQUVGLFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDbEQsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzQyxNQUFNLFlBQVksR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDbEMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsbUNBQW1DO1NBQzNDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5DLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gXCJmYXN0aWZ5XCI7XG5pbXBvcnQgeyBzdGFydFRlc3RFbnYsIHN0b3BUZXN0RW52IH0gZnJvbSBcIi4uLy4uLy4uL2hlbHBlclwiO1xuXG5sZXQgYXBwOiBGYXN0aWZ5SW5zdGFuY2U7XG5cbmNvbnN0IGZwID0gcmVxdWlyZSgnZmFzdGlmeS1wbHVnaW4nKTtcbmNvbnN0IGtuZXhQbHVnaW4gPSBmcChhc3luYyAoZmFzdGlmeTogYW55LCBvcHRpb25zOmFueSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgIGNvbnN0IGtuZXggPSB7IFxuICAgICAgICByYXc6IGplc3QuZm4oKSxcbiAgICAgICAgZGVzdHJveTogamVzdC5mbigpLFxuICAgICAgICBtaWdyYXRlOiB7XG4gICAgICAgICAgICBsYXRlc3Q6IGplc3QuZm4oKSxcbiAgICAgICAgfSxcbiAgICAgICAgdGFibGU6ICgpID0+ICh7XG4gICAgICAgICAgICBzZWxlY3Q6IGplc3QuZm4oKSxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmYXN0aWZ5LmRlY29yYXRlKCdrbmV4Jywga25leCk7XG59KVxuXG5qZXN0Lm1vY2soJy4vc3JjL3BsdWdpbnMva25leC1wbHVnaW4nLCAoKCkgPT4ge1xuICByZXR1cm4ga25leFBsdWdpbjtcbn0pKTtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhcHAgPSBhd2FpdCBzdGFydFRlc3RFbnYoKTtcblxufSk7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xufSlcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHN0b3BUZXN0RW52KCk7XG59KVxuXG5kZXNjcmliZSgnR0VUIHB1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzJywgKCkgPT4ge1xuICAgIGl0Lm9ubHkoJ3Nob3VsZCBnZXQgY3VycmVuY3kgbGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZXhjaGFnZVJhdGVzID0gYXdhaXQgYXBwLmluamVjdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnL3B1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coZXhjaGFnZVJhdGVzLnN0YXR1c0NvZGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuYm9keSk7XG5cbiAgICB9KVxufSlcbiJdLCJ2ZXJzaW9uIjozfQ==