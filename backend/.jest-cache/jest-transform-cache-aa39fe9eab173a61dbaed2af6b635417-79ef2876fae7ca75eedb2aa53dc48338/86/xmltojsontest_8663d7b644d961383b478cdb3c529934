726bfcef7bc2db87b8219f5f02c496cf
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_test_1 = require("node:test");
const xml_to_json_1 = __importDefault(require("../../../src/utils/xml-to-json"));
const data = `
<FxRates xmlns="http://www.lb.lt/WebServices/FxRates">
<script/>
<FxRate>
<Tp>EU</Tp>
<Dt>2024-02-23</Dt>
<CcyAmt>
<Ccy>EUR</Ccy>
<Amt>1</Amt>
</CcyAmt>
<CcyAmt>
<Ccy>AUD</Ccy>
<Amt>1.6467</Amt>
</CcyAmt>
</FxRate>
<FxRate>
<Tp>EU</Tp>
<Dt>2024-02-23</Dt>
<CcyAmt>
<Ccy>EUR</Ccy>
<Amt>1</Amt>
</CcyAmt>
<CcyAmt>
<Ccy>BGN</Ccy>
<Amt>1.9558</Amt>
</CcyAmt>
</FxRate>
</FxRates>
`;
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    jest.resetAllMocks();
});
(0, node_test_1.describe)("parse xml to json", () => {
    it("parsed fx rates xml to json", async () => {
        const jsonData = await (0, xml_to_json_1.default)(data);
        expect(jsonData).toEqual({
            FxRates: {
                $: { xmlns: "http://www.lb.lt/WebServices/FxRates" },
                script: "",
                FxRate: [
                    {
                        Tp: "EU",
                        Dt: "2024-02-23",
                        CcyAmt: [
                            { Ccy: "EUR", Amt: "1" },
                            { Ccy: "AUD", Amt: "1.6467" },
                        ],
                    },
                    {
                        Tp: "EU",
                        Dt: "2024-02-23",
                        CcyAmt: [
                            { Ccy: "EUR", Amt: "1" },
                            { Ccy: "BGN", Amt: "1.9558" },
                        ],
                    },
                ],
            },
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3V0aWxzL3htbC10by1qc29uLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5Q0FBcUM7QUFDckMsaUZBQXVEO0FBRXZELE1BQU0sSUFBSSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNEJaLENBQUM7QUFFRixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2hCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN6QixDQUFDLENBQUMsQ0FBQTtBQU1GLElBQUEsb0JBQVEsRUFBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxxQkFBUyxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsT0FBTyxFQUFFO2dCQUNMLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxzQ0FBc0MsRUFBRTtnQkFDcEQsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsTUFBTSxFQUFFO29CQUNKO3dCQUNJLEVBQUUsRUFBRSxJQUFJO3dCQUNSLEVBQUUsRUFBRSxZQUFZO3dCQUNoQixNQUFNLEVBQUU7NEJBQ0osRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7NEJBQ3hCLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFO3lCQUNoQztxQkFDSjtvQkFDRDt3QkFDSSxFQUFFLEVBQUUsSUFBSTt3QkFDUixFQUFFLEVBQUUsWUFBWTt3QkFDaEIsTUFBTSxFQUFFOzRCQUNKLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFOzRCQUN4QixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTt5QkFDaEM7cUJBQ0o7aUJBQ0o7YUFDSjtTQUNKLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3V0aWxzL3htbC10by1qc29uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUgfSBmcm9tIFwibm9kZTp0ZXN0XCI7XG5pbXBvcnQgeG1sVG9Kc29uIGZyb20gXCIuLi8uLi8uLi9zcmMvdXRpbHMveG1sLXRvLWpzb25cIjtcblxuY29uc3QgZGF0YSA9IGBcbjxGeFJhdGVzIHhtbG5zPVwiaHR0cDovL3d3dy5sYi5sdC9XZWJTZXJ2aWNlcy9GeFJhdGVzXCI+XG48c2NyaXB0Lz5cbjxGeFJhdGU+XG48VHA+RVU8L1RwPlxuPER0PjIwMjQtMDItMjM8L0R0PlxuPENjeUFtdD5cbjxDY3k+RVVSPC9DY3k+XG48QW10PjE8L0FtdD5cbjwvQ2N5QW10PlxuPENjeUFtdD5cbjxDY3k+QVVEPC9DY3k+XG48QW10PjEuNjQ2NzwvQW10PlxuPC9DY3lBbXQ+XG48L0Z4UmF0ZT5cbjxGeFJhdGU+XG48VHA+RVU8L1RwPlxuPER0PjIwMjQtMDItMjM8L0R0PlxuPENjeUFtdD5cbjxDY3k+RVVSPC9DY3k+XG48QW10PjE8L0FtdD5cbjwvQ2N5QW10PlxuPENjeUFtdD5cbjxDY3k+QkdOPC9DY3k+XG48QW10PjEuOTU1ODwvQW10PlxuPC9DY3lBbXQ+XG48L0Z4UmF0ZT5cbjwvRnhSYXRlcz5cbmA7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xufSk7XG5cbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbn0pXG5cblxuXG5cblxuZGVzY3JpYmUoXCJwYXJzZSB4bWwgdG8ganNvblwiLCAoKSA9PiB7XG4gICAgaXQoXCJwYXJzZWQgZnggcmF0ZXMgeG1sIHRvIGpzb25cIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBqc29uRGF0YSA9IGF3YWl0IHhtbFRvSnNvbihkYXRhKTtcbiAgICAgICAgZXhwZWN0KGpzb25EYXRhKS50b0VxdWFsKHtcbiAgICAgICAgICAgIEZ4UmF0ZXM6IHtcbiAgICAgICAgICAgICAgICAkOiB7IHhtbG5zOiBcImh0dHA6Ly93d3cubGIubHQvV2ViU2VydmljZXMvRnhSYXRlc1wiIH0sXG4gICAgICAgICAgICAgICAgc2NyaXB0OiBcIlwiLFxuICAgICAgICAgICAgICAgIEZ4UmF0ZTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBUcDogXCJFVVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgRHQ6IFwiMjAyNC0wMi0yM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ2N5QW10OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBDY3k6IFwiRVVSXCIsIEFtdDogXCIxXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IENjeTogXCJBVURcIiwgQW10OiBcIjEuNjQ2N1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBUcDogXCJFVVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgRHQ6IFwiMjAyNC0wMi0yM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ2N5QW10OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBDY3k6IFwiRVVSXCIsIEFtdDogXCIxXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IENjeTogXCJCR05cIiwgQW10OiBcIjEuOTU1OFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9