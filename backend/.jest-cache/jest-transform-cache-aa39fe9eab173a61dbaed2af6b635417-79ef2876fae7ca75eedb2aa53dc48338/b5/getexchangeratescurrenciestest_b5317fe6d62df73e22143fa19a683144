de6be8fbfdfafb93f3d2ecde024a235b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../../../src/plugins/knex-plugin', (() => {
    return knexPlugin;
}));
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate('knex', knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('GET public/exchange-rates/currencies', () => {
    it.only('should get currency list', async () => {
        knex.table = () => ({
            select: () => [{ currency: 'EUR' }]
        });
        const exchageRates = await app.inject({
            method: 'GET',
            url: '/public/exchange-rates/currencies',
        });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQVdBLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsQ0FBQyxHQUFHLEVBQUU7SUFDckQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQVpKLDRDQUF3RjtBQUN4RixvRUFBZ0M7QUFFaEMsSUFBSSxHQUFvQixDQUFDO0FBQ3pCLElBQUksSUFBSSxHQUFHLElBQUEsbUNBQTBCLEdBQUUsQ0FBQTtBQUV2QyxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFFLEVBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUN0RCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQU1ILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNqQixHQUFHLEdBQUcsTUFBTSxJQUFBLHFCQUFZLEdBQUUsQ0FBQztBQUUvQixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNsQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUE7QUFFRixRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDaEIsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQztBQUN4QixDQUFDLENBQUMsQ0FBQTtBQUVGLFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDbEQsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDaEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ2xDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLG1DQUFtQztTQUMzQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuQyxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL3Rlc3QvdW5pdC9yb3V0ZXMvcHVibGljL2dldC1leGNoYW5nZS1yYXRlcy1jdXJyZW5jaWVzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmFzdGlmeSwgdHlwZSBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeVwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMsIHN0YXJ0VGVzdEVudiwgc3RvcFRlc3RFbnYgfSBmcm9tIFwiLi4vLi4vLi4vaGVscGVyXCI7XG5pbXBvcnQgZnAgZnJvbSAnZmFzdGlmeS1wbHVnaW4nO1xuXG5sZXQgYXBwOiBGYXN0aWZ5SW5zdGFuY2U7XG5sZXQga25leCA9IGdldERlZmF1bHRLbmV4UGx1Z2luUGFyYW1zKClcblxuY29uc3Qga25leFBsdWdpbiA9IGZwKGFzeW5jIChmYXN0aWZ5OiBhbnksIG9wdGlvbnM6YW55KSA9PiB7XG4gICAgZmFzdGlmeS5kZWNvcmF0ZSgna25leCcsIGtuZXgpO1xufSk7XG5cbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva25leC1wbHVnaW4nLCAoKCkgPT4ge1xuICByZXR1cm4ga25leFBsdWdpbjtcbn0pKTtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhcHAgPSBhd2FpdCBzdGFydFRlc3RFbnYoKTtcblxufSk7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xufSlcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHN0b3BUZXN0RW52KCk7XG59KVxuXG5kZXNjcmliZSgnR0VUIHB1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzJywgKCkgPT4ge1xuICAgIGl0Lm9ubHkoJ3Nob3VsZCBnZXQgY3VycmVuY3kgbGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAga25leC50YWJsZSA9ICgpID0+ICh7XG4gICAgICAgICAgICBzZWxlY3Q6ICgpID0+IFt7Y3VycmVuY3k6ICdFVVInfV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZXhjaGFnZVJhdGVzID0gYXdhaXQgYXBwLmluamVjdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnL3B1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coZXhjaGFnZVJhdGVzLnN0YXR1c0NvZGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuYm9keSk7XG5cbiAgICB9KVxufSlcbiJdLCJ2ZXJzaW9uIjozfQ==