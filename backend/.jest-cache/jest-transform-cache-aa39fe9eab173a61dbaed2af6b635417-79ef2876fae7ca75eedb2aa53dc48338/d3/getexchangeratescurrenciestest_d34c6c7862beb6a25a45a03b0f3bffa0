b6d33fb920e1bd8eafcd7d93009161ab
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe("GET public/exchange-rates/currencies", () => {
    it.only("should get currency list", async () => {
        knex.table = () => ({
            select: () => [
                { currency: "EUR" },
                { currency: "USD" },
                { currency: "JPY" },
            ],
        });
        const exchageRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates/currencies",
        });
        expect(exchageRates.statusCode).toBe(200);
        console.log(exchageRates.headers);
        expect(JSON.parse(exchageRates.body)).toEqual({ data: ["EUR", "USD", "JPY"] });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQWVBLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBaEJILDRDQUl5QjtBQUN6QixvRUFBZ0M7QUFFaEMsSUFBSSxHQUFvQixDQUFDO0FBQ3pCLElBQUksSUFBSSxHQUFHLElBQUEsbUNBQTBCLEdBQUUsQ0FBQztBQUV4QyxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFFLEVBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFZLEVBQUUsRUFBRTtJQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUMsQ0FBQztBQU1ILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQixHQUFHLEdBQUcsTUFBTSxJQUFBLHFCQUFZLEdBQUUsQ0FBQztBQUM3QixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDcEQsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDbEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNaLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtnQkFDbkIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO2dCQUNuQixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7YUFDcEI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDcEMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsbUNBQW1DO1NBQ3pDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmYXN0aWZ5LCB0eXBlIEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gXCJmYXN0aWZ5XCI7XG5pbXBvcnQge1xuICBnZXREZWZhdWx0S25leFBsdWdpblBhcmFtcyxcbiAgc3RhcnRUZXN0RW52LFxuICBzdG9wVGVzdEVudixcbn0gZnJvbSBcIi4uLy4uLy4uL2hlbHBlclwiO1xuaW1wb3J0IGZwIGZyb20gXCJmYXN0aWZ5LXBsdWdpblwiO1xuXG5sZXQgYXBwOiBGYXN0aWZ5SW5zdGFuY2U7XG5sZXQga25leCA9IGdldERlZmF1bHRLbmV4UGx1Z2luUGFyYW1zKCk7XG5cbmNvbnN0IGtuZXhQbHVnaW4gPSBmcChhc3luYyAoZmFzdGlmeTogYW55LCBvcHRpb25zOiBhbnkpID0+IHtcbiAgZmFzdGlmeS5kZWNvcmF0ZShcImtuZXhcIiwga25leCk7XG59KTtcblxuamVzdC5tb2NrKFwiLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva25leC1wbHVnaW5cIiwgKCkgPT4ge1xuICByZXR1cm4ga25leFBsdWdpbjtcbn0pO1xuXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICBhcHAgPSBhd2FpdCBzdGFydFRlc3RFbnYoKTtcbn0pO1xuXG5iZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgamVzdC5yZXNldEFsbE1vY2tzKCk7XG59KTtcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBzdG9wVGVzdEVudigpO1xufSk7XG5cbmRlc2NyaWJlKFwiR0VUIHB1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzXCIsICgpID0+IHtcbiAgaXQub25seShcInNob3VsZCBnZXQgY3VycmVuY3kgbGlzdFwiLCBhc3luYyAoKSA9PiB7XG4gICAga25leC50YWJsZSA9ICgpID0+ICh7XG4gICAgICBzZWxlY3Q6ICgpID0+IFtcbiAgICAgICAgeyBjdXJyZW5jeTogXCJFVVJcIiB9LFxuICAgICAgICB7IGN1cnJlbmN5OiBcIlVTRFwiIH0sXG4gICAgICAgIHsgY3VycmVuY3k6IFwiSlBZXCIgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBleGNoYWdlUmF0ZXMgPSBhd2FpdCBhcHAuaW5qZWN0KHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIHVybDogXCIvcHVibGljL2V4Y2hhbmdlLXJhdGVzL2N1cnJlbmNpZXNcIixcbiAgICB9KTtcblxuICAgIGV4cGVjdChleGNoYWdlUmF0ZXMuc3RhdHVzQ29kZSkudG9CZSgyMDApO1xuICAgIGNvbnNvbGUubG9nKGV4Y2hhZ2VSYXRlcy5oZWFkZXJzKVxuICAgIGV4cGVjdChKU09OLnBhcnNlKGV4Y2hhZ2VSYXRlcy5ib2R5KSkudG9FcXVhbCh7IGRhdGE6IFtcIkVVUlwiLCBcIlVTRFwiLCBcIkpQWVwiXSB9KTtcbiAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuc3RhdHVzQ29kZSk7XG4gICAgY29uc29sZS5sb2coZXhjaGFnZVJhdGVzLmJvZHkpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9