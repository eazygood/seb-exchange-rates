d38009f21e9072a64809859ae4759ec2
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('endpoints /public/exchange-rates calls', () => {
    describe("GET /public/exchange-rates/", () => {
        it("should response with exchange rates data", async () => {
            const data = [
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "117.201880",
                    exchange_date: "2023-01-22",
                },
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "116.201880",
                    exchange_date: "2023-01-21",
                },
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "115.201880",
                    exchange_date: "2023-01-20",
                },
                {
                    source_currency: "EUR",
                    target_currency: "JPY",
                    source_rate: "1",
                    target_rate: "120",
                    exchange_date: "2023-01-20",
                },
            ];
            knex.table = () => ({
                select: () => {
                    return [{ rates: JSON.stringify(data), posting_date: "2024-01-20" }];
                },
            });
            const exchangeRates = await app.inject({
                method: "GET",
                url: "/public/exchange-rates",
            });
            expect(exchangeRates.statusCode).toBe(200);
            expect(JSON.parse(exchangeRates.body)).toEqual({
                data: {
                    RSD: [
                        { date: '2023-01-22', source_rate: '1', target_rate: '117.201880' },
                        { date: '2023-01-21', source_rate: '1', target_rate: '116.201880' },
                        { date: '2023-01-20', source_rate: '1', target_rate: '115.201880' }
                    ],
                    JPY: [{ date: '2023-01-20', source_rate: '1', target_rate: '120' }]
                },
            });
        });
    });
    describe("GET /public/exchange-rates/:currency", () => {
        it("should return 404 not found", async () => {
            const exchangeRates = await app.inject({
                method: "GET",
                url: "/public/exchange-rates/",
            });
            expect(exchangeRates.statusCode).toEqual(404);
        });
        it("should response exchange rates by currency", async () => {
            const data = [
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "117.201880",
                    exchange_date: "2023-01-22",
                },
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "116.201880",
                    exchange_date: "2023-01-21",
                },
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "115.201880",
                    exchange_date: "2023-01-20",
                },
                {
                    source_currency: "EUR",
                    target_currency: "JPY",
                    source_rate: "1",
                    target_rate: "120",
                    exchange_date: "2023-01-20",
                },
            ];
            knex.table = () => ({
                select: () => {
                    return [{ rates: JSON.stringify(data), posting_date: "2024-01-20" }];
                },
            });
            const exchangeRates = await app.inject({
                method: "GET",
                url: "/public/exchange-rates/RSD",
            });
            expect(exchangeRates.statusCode).toBe(200);
            expect(JSON.parse(exchangeRates.body)).toEqual({
                data: {
                    RSD: [
                        { date: "2023-01-22", source_rate: "1", target_rate: "117.201880" },
                        { date: "2023-01-21", source_rate: "1", target_rate: "116.201880" },
                        { date: "2023-01-20", source_rate: "1", target_rate: "115.201880" },
                    ],
                },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,