20bc3f637a1ba600b3924a01dc1f268e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../../../src/plugins/knex-plugin', (() => {
    return knexPlugin;
}));
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = {};
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    console.log(options);
    const knex = {
        raw: jest.fn(),
        destroy: jest.fn(),
        migrate: {
            latest: jest.fn(),
        },
        table: () => ({
            // select: () => {
            //     return [{currency: 'EUR'}, {currency: 'USD'}, {currency: 'AUD'}, {currency: 'RUB'},{currency: 'JPY'}]
            // },
            select: jest.fn().mockReturnThis(),
        })
    };
    fastify.decorate('knex', knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('GET public/exchange-rates/currencies', () => {
    it.only('should get currency list', async () => {
        const exchageRates = await app.inject({
            method: 'GET',
            url: '/public/exchange-rates/currencies',
        });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQTRCQSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQ3JELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUE3QkosNENBQTREO0FBQzVELG9FQUFnQztBQUVoQyxJQUFJLEdBQW9CLENBQUM7QUFDekIsSUFBSSxJQUFJLEdBQUcsRUFFVixDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUcsSUFBQSx3QkFBRSxFQUFDLEtBQUssRUFBRSxPQUFZLEVBQUUsT0FBVyxFQUFFLEVBQUU7SUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQixNQUFNLElBQUksR0FBRztRQUNULEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2QsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDbEIsT0FBTyxFQUFFO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDcEI7UUFDRCxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNWLGtCQUFrQjtZQUNsQiw0R0FBNEc7WUFDNUcsS0FBSztZQUNMLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1NBQ3JDLENBQUM7S0FDTCxDQUFBO0lBRUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUE7QUFNRixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDakIsR0FBRyxHQUFHLE1BQU0sSUFBQSxxQkFBWSxHQUFFLENBQUM7QUFFL0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFBO0FBRUYsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2hCLE1BQU0sSUFBQSxvQkFBVyxHQUFFLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUE7QUFFRixRQUFRLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ2xELEVBQUUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ2xDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLG1DQUFtQztTQUMzQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuQyxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL3Rlc3QvdW5pdC9yb3V0ZXMvcHVibGljL2dldC1leGNoYW5nZS1yYXRlcy1jdXJyZW5jaWVzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeVwiO1xuaW1wb3J0IHsgc3RhcnRUZXN0RW52LCBzdG9wVGVzdEVudiB9IGZyb20gXCIuLi8uLi8uLi9oZWxwZXJcIjtcbmltcG9ydCBmcCBmcm9tICdmYXN0aWZ5LXBsdWdpbic7XG5cbmxldCBhcHA6IEZhc3RpZnlJbnN0YW5jZTtcbmxldCBrbmV4ID0ge1xuXG59XG5cbmNvbnN0IGtuZXhQbHVnaW4gPSBmcChhc3luYyAoZmFzdGlmeTogYW55LCBvcHRpb25zOmFueSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgIGNvbnN0IGtuZXggPSB7IFxuICAgICAgICByYXc6IGplc3QuZm4oKSxcbiAgICAgICAgZGVzdHJveTogamVzdC5mbigpLFxuICAgICAgICBtaWdyYXRlOiB7XG4gICAgICAgICAgICBsYXRlc3Q6IGplc3QuZm4oKSxcbiAgICAgICAgfSxcbiAgICAgICAgdGFibGU6ICgpID0+ICh7XG4gICAgICAgICAgICAvLyBzZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gW3tjdXJyZW5jeTogJ0VVUid9LCB7Y3VycmVuY3k6ICdVU0QnfSwge2N1cnJlbmN5OiAnQVVEJ30sIHtjdXJyZW5jeTogJ1JVQid9LHtjdXJyZW5jeTogJ0pQWSd9XVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHNlbGVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZmFzdGlmeS5kZWNvcmF0ZSgna25leCcsIGtuZXgpO1xufSlcblxuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9rbmV4LXBsdWdpbicsICgoKSA9PiB7XG4gIHJldHVybiBrbmV4UGx1Z2luO1xufSkpO1xuXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGFwcCA9IGF3YWl0IHN0YXJ0VGVzdEVudigpO1xuXG59KTtcblxuYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgamVzdC5yZXNldEFsbE1vY2tzKCk7XG59KVxuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgc3RvcFRlc3RFbnYoKTtcbn0pXG5cbmRlc2NyaWJlKCdHRVQgcHVibGljL2V4Y2hhbmdlLXJhdGVzL2N1cnJlbmNpZXMnLCAoKSA9PiB7XG4gICAgaXQub25seSgnc2hvdWxkIGdldCBjdXJyZW5jeSBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBleGNoYWdlUmF0ZXMgPSBhd2FpdCBhcHAuaW5qZWN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvcHVibGljL2V4Y2hhbmdlLXJhdGVzL2N1cnJlbmNpZXMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuc3RhdHVzQ29kZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGV4Y2hhZ2VSYXRlcy5ib2R5KTtcblxuICAgIH0pXG59KVxuIl0sInZlcnNpb24iOjN9