4b53147ea1247723962cb9ccd1066d36
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFxRatesByCurrency = exports.getFxRates = void 0;
const lodash_1 = __importDefault(require("lodash"));
const repositories = __importStar(require("../repositories"));
const getFxRates = async (app, latest) => {
    const fxRates = await repositories.getFxRates(app, latest);
    const rates = fxRates
        .map((rate) => JSON.parse(rate.rates))
        .flat();
    return transformData(rates);
};
exports.getFxRates = getFxRates;
const getFxRatesByCurrency = async (app, currency) => {
    const fxRates = await repositories.getFxRates(app);
    const rates = fxRates
        .map((rate) => JSON.parse(rate.rates))
        .flat()
        .filter((rate) => rate.target_currency === currency);
    return transformData(rates);
};
exports.getFxRatesByCurrency = getFxRatesByCurrency;
function transformData(data) {
    // Group the data by target_currency
    const groupedData = lodash_1.default.groupBy(data, "target_currency");
    // Map over the grouped data and transform each group
    const transformedData = lodash_1.default.mapValues(groupedData, (group) => {
        // Remove duplicates based on exchange_date
        const uniqueGroup = lodash_1.default.uniqBy(group, "exchange_date");
        // Transform the group into the desired format
        return lodash_1.default.map(uniqueGroup, (item) => ({
            date: item.exchange_date,
            source_rate: item.source_rate,
            target_rate: item.target_rate,
        }));
    });
    return transformedData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvc3JjL21hbmFnZXJzL2Z4cmF0ZS1tYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsb0RBQXVCO0FBRXZCLDhEQUFnRDtBQVF6QyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQzdCLEdBQW9CLEVBQ3BCLE1BQWdCLEVBQ1csRUFBRTtJQUM3QixNQUFNLE9BQU8sR0FBZ0IsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4RSxNQUFNLEtBQUssR0FBdUIsT0FBTztTQUN0QyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JDLElBQUksRUFBRSxDQUFDO0lBRVYsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBVlcsUUFBQSxVQUFVLGNBVXJCO0FBRUssTUFBTSxvQkFBb0IsR0FBRyxLQUFLLEVBQ3ZDLEdBQW9CLEVBQ3BCLFFBQWdCLEVBQ1csRUFBRTtJQUM3QixNQUFNLE9BQU8sR0FBZ0IsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhFLE1BQU0sS0FBSyxHQUF1QixPQUFPO1NBQ3RDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckMsSUFBSSxFQUFFO1NBQ04sTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxLQUFLLFFBQVEsQ0FBQyxDQUFDO0lBRXZELE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQVpXLFFBQUEsb0JBQW9CLHdCQVkvQjtBQUVGLFNBQVMsYUFBYSxDQUFDLElBQXdCO0lBQzdDLG9DQUFvQztJQUNwQyxNQUFNLFdBQVcsR0FBRyxnQkFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUV2RCxxREFBcUQ7SUFDckQsTUFBTSxlQUFlLEdBQ25CLGdCQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ2pDLDJDQUEyQztRQUMzQyxNQUFNLFdBQVcsR0FBRyxnQkFBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFckQsOENBQThDO1FBQzlDLE9BQU8sZ0JBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYTtZQUN4QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFFTCxPQUFPLGVBQWUsQ0FBQztBQUN6QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL3NyYy9tYW5hZ2Vycy9meHJhdGUtbWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeVwiO1xuaW1wb3J0ICogYXMgcmVwb3NpdG9yaWVzIGZyb20gXCIuLi9yZXBvc2l0b3JpZXNcIjtcbmltcG9ydCB7XG4gIEZ4UmF0ZUJ5RGF0ZURhdGEsXG4gIEZ4UmF0ZXNEYixcbiAgU291cmNlVGFyZ2V0RnhSYXRlRGF0YSxcbiAgU3R1Y3R1cmVkRnhSYXRlcyxcbn0gZnJvbSBcIi4uL2VudGl0aWVzXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRGeFJhdGVzID0gYXN5bmMgKFxuICBhcHA6IEZhc3RpZnlJbnN0YW5jZSxcbiAgbGF0ZXN0PzogYm9vbGVhbixcbik6IFByb21pc2U8RnhSYXRlQnlEYXRlRGF0YT4gPT4ge1xuICBjb25zdCBmeFJhdGVzOiBGeFJhdGVzRGJbXSA9IGF3YWl0IHJlcG9zaXRvcmllcy5nZXRGeFJhdGVzKGFwcCwgbGF0ZXN0KTtcbiAgY29uc3QgcmF0ZXM6IFN0dWN0dXJlZEZ4UmF0ZXNbXSA9IGZ4UmF0ZXNcbiAgICAubWFwKChyYXRlKSA9PiBKU09OLnBhcnNlKHJhdGUucmF0ZXMpKVxuICAgIC5mbGF0KCk7XG5cbiAgcmV0dXJuIHRyYW5zZm9ybURhdGEocmF0ZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEZ4UmF0ZXNCeUN1cnJlbmN5ID0gYXN5bmMgKFxuICBhcHA6IEZhc3RpZnlJbnN0YW5jZSxcbiAgY3VycmVuY3k6IHN0cmluZ1xuKTogUHJvbWlzZTxGeFJhdGVCeURhdGVEYXRhPiA9PiB7XG4gIGNvbnN0IGZ4UmF0ZXM6IEZ4UmF0ZXNEYltdID0gYXdhaXQgcmVwb3NpdG9yaWVzLmdldEZ4UmF0ZXMoYXBwKTtcblxuICBjb25zdCByYXRlczogU3R1Y3R1cmVkRnhSYXRlc1tdID0gZnhSYXRlc1xuICAgIC5tYXAoKHJhdGUpID0+IEpTT04ucGFyc2UocmF0ZS5yYXRlcykpXG4gICAgLmZsYXQoKVxuICAgIC5maWx0ZXIoKHJhdGUpID0+IHJhdGUudGFyZ2V0X2N1cnJlbmN5ID09PSBjdXJyZW5jeSk7XG5cbiAgcmV0dXJuIHRyYW5zZm9ybURhdGEocmF0ZXMpO1xufTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhOiBTdHVjdHVyZWRGeFJhdGVzW10pOiBGeFJhdGVCeURhdGVEYXRhIHtcbiAgLy8gR3JvdXAgdGhlIGRhdGEgYnkgdGFyZ2V0X2N1cnJlbmN5XG4gIGNvbnN0IGdyb3VwZWREYXRhID0gXy5ncm91cEJ5KGRhdGEsIFwidGFyZ2V0X2N1cnJlbmN5XCIpO1xuXG4gIC8vIE1hcCBvdmVyIHRoZSBncm91cGVkIGRhdGEgYW5kIHRyYW5zZm9ybSBlYWNoIGdyb3VwXG4gIGNvbnN0IHRyYW5zZm9ybWVkRGF0YTogeyBbY3VycmVuY3k6IHN0cmluZ106IFNvdXJjZVRhcmdldEZ4UmF0ZURhdGFbXSB9ID1cbiAgICBfLm1hcFZhbHVlcyhncm91cGVkRGF0YSwgKGdyb3VwKSA9PiB7XG4gICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBiYXNlZCBvbiBleGNoYW5nZV9kYXRlXG4gICAgICBjb25zdCB1bmlxdWVHcm91cCA9IF8udW5pcUJ5KGdyb3VwLCBcImV4Y2hhbmdlX2RhdGVcIik7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSB0aGUgZ3JvdXAgaW50byB0aGUgZGVzaXJlZCBmb3JtYXRcbiAgICAgIHJldHVybiBfLm1hcCh1bmlxdWVHcm91cCwgKGl0ZW0pID0+ICh7XG4gICAgICAgIGRhdGU6IGl0ZW0uZXhjaGFuZ2VfZGF0ZSxcbiAgICAgICAgc291cmNlX3JhdGU6IGl0ZW0uc291cmNlX3JhdGUsXG4gICAgICAgIHRhcmdldF9yYXRlOiBpdGVtLnRhcmdldF9yYXRlLFxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gIHJldHVybiB0cmFuc2Zvcm1lZERhdGE7XG59XG4iXSwidmVyc2lvbiI6M30=