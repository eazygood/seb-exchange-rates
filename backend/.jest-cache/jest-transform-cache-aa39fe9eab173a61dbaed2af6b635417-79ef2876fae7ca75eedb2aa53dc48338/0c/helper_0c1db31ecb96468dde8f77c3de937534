1ce9a714a0a6a1214252d97e7f116699
"use strict";
// import Fastify from "fastify";
// import fp from "fastify-plugin";
// import App from "../src/app";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultKnexPluginParams = exports.stopTestEnv = exports.startTestEnv = void 0;
// import app from '../src/app';
// const mockKnex = async (fastify: any) => {
//   fastify.knex = jest.fn().mockReturnThis();
//   fastify.transacting = jest.fn().mockReturnThis();
//   fastify.update = jest.fn().mockReturnThis();
//   fastify.insert = jest.fn().mockReturnThis();
//   fastify.select = jest.fn().mockReturnThis()
//   fastify.from = jest.fn().mockReturnThis();
//   fastify.where = jest.fn().mockReturnThis();
//   fastify.knex.transaction = 
//   jest.fn(async function mockTransaction(cb) {
//       return cb(trx);
//   });
// };
// const trx = {
//   commit: jest.fn(function(data) {
//       return data;
//   }),
//   rollback: jest.fn(),
// };
let app;
async function startTestEnv() {
    const app = require('../src/app').default;
    await app.ready();
    return app;
}
exports.startTestEnv = startTestEnv;
async function stopTestEnv() {
    await app?.close();
}
exports.stopTestEnv = stopTestEnv;
function getDefaultKnexPluginParams() {
    return {
        raw: jest.fn(),
        destroy: jest.fn(),
        migrate: {
            latest: jest.fn(),
        },
        table: {},
    };
}
exports.getDefaultKnexPluginParams = getDefaultKnexPluginParams;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC9oZWxwZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLGlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsZ0NBQWdDOzs7QUFnQmhDLGdDQUFnQztBQUVoQyw2Q0FBNkM7QUFDN0MsK0NBQStDO0FBQy9DLHNEQUFzRDtBQUN0RCxpREFBaUQ7QUFDakQsaURBQWlEO0FBQ2pELGdEQUFnRDtBQUNoRCwrQ0FBK0M7QUFDL0MsZ0RBQWdEO0FBQ2hELGdDQUFnQztBQUNoQyxpREFBaUQ7QUFDakQsd0JBQXdCO0FBQ3hCLFFBQVE7QUFDUixLQUFLO0FBQ0wsZ0JBQWdCO0FBQ2hCLHFDQUFxQztBQUNyQyxxQkFBcUI7QUFDckIsUUFBUTtBQUNSLHlCQUF5QjtBQUN6QixLQUFLO0FBRUwsSUFBSSxHQUFvQixDQUFDO0FBRWxCLEtBQUssVUFBVSxZQUFZO0lBQ2pDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFFMUMsTUFBTSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFbEIsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBTkQsb0NBTUM7QUFFTSxLQUFLLFVBQVUsV0FBVztJQUM3QixNQUFNLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUN2QixDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQiwwQkFBMEI7SUFDekMsT0FBTztRQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ1IsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDbEIsT0FBTyxFQUFFO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDcEI7UUFDUCxLQUFLLEVBQUUsRUFBRTtLQUNULENBQUE7QUFDRixDQUFDO0FBVEQsZ0VBU0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC9oZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IEZhc3RpZnkgZnJvbSBcImZhc3RpZnlcIjtcbi8vIGltcG9ydCBmcCBmcm9tIFwiZmFzdGlmeS1wbHVnaW5cIjtcbi8vIGltcG9ydCBBcHAgZnJvbSBcIi4uL3NyYy9hcHBcIjtcblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkKCkge1xuLy8gICBjb25zdCBhcHAgPSBGYXN0aWZ5KCk7XG5cbi8vICAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbi8vICAgICB2b2lkIGFwcC5yZWdpc3RlcihmcChBcHApKTtcbi8vICAgICBhd2FpdCBhcHAucmVhZHkoKTtcbi8vICAgfSk7XG5cbi8vICAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4gYXdhaXQgYXBwLmNsb3NlKCkpO1xuXG4vLyAgIHJldHVybiBhcHA7XG4vLyB9XG5pbXBvcnQgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCBrbmV4UGx1Z2luIGZyb20gJy4uL3NyYy9wbHVnaW5zL2tuZXgtcGx1Z2luJztcbi8vIGltcG9ydCBhcHAgZnJvbSAnLi4vc3JjL2FwcCc7XG5cbi8vIGNvbnN0IG1vY2tLbmV4ID0gYXN5bmMgKGZhc3RpZnk6IGFueSkgPT4ge1xuLy8gICBmYXN0aWZ5LmtuZXggPSBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKTtcbi8vICAgZmFzdGlmeS50cmFuc2FjdGluZyA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpO1xuLy8gICBmYXN0aWZ5LnVwZGF0ZSA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpO1xuLy8gICBmYXN0aWZ5Lmluc2VydCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpO1xuLy8gICBmYXN0aWZ5LnNlbGVjdCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpXG4vLyAgIGZhc3RpZnkuZnJvbSA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpO1xuLy8gICBmYXN0aWZ5LndoZXJlID0gamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCk7XG4vLyAgIGZhc3RpZnkua25leC50cmFuc2FjdGlvbiA9IFxuLy8gICBqZXN0LmZuKGFzeW5jIGZ1bmN0aW9uIG1vY2tUcmFuc2FjdGlvbihjYikge1xuLy8gICAgICAgcmV0dXJuIGNiKHRyeCk7XG4vLyAgIH0pO1xuLy8gfTtcbi8vIGNvbnN0IHRyeCA9IHtcbi8vICAgY29tbWl0OiBqZXN0LmZuKGZ1bmN0aW9uKGRhdGEpIHtcbi8vICAgICAgIHJldHVybiBkYXRhO1xuLy8gICB9KSxcbi8vICAgcm9sbGJhY2s6IGplc3QuZm4oKSxcbi8vIH07XG5cbmxldCBhcHA6IEZhc3RpZnlJbnN0YW5jZTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0VGVzdEVudigpOiBQcm9taXNlPEZhc3RpZnlJbnN0YW5jZT4ge1xuXHRjb25zdCBhcHAgPSByZXF1aXJlKCcuLi9zcmMvYXBwJykuZGVmYXVsdDtcblxuXHRhd2FpdCBhcHAucmVhZHkoKTtcblxuXHRyZXR1cm4gYXBwO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RvcFRlc3RFbnYoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgYXBwPy5jbG9zZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMoKSB7XG5cdHJldHVybiB7XG5cdFx0cmF3OiBqZXN0LmZuKCksXG4gICAgICAgIGRlc3Ryb3k6IGplc3QuZm4oKSxcbiAgICAgICAgbWlncmF0ZToge1xuICAgICAgICAgICAgbGF0ZXN0OiBqZXN0LmZuKCksXG4gICAgICAgIH0sXG5cdFx0dGFibGU6IHt9LFxuXHR9XG59Il0sInZlcnNpb24iOjN9