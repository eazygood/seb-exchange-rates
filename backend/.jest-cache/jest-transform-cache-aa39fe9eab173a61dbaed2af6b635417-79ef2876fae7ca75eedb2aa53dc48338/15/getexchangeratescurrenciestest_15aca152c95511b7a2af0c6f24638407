db9e461e00ec05bdc8c966930e67b651
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../../../src/plugins/knex-plugin', (() => {
    return knexPlugin;
}));
const helper_1 = require("../../../helper");
let app;
const fp = require('fastify-plugin');
const knexPlugin = fp(async (fastify, options) => {
    console.log(options);
    const knex = {
        raw: jest.fn(),
        destroy: jest.fn(),
        migrate: {
            latest: jest.fn(),
        },
        table: () => ({
            select: () => {
                return ['EUR', 'USD', 'AUD', 'RUB', 'JPY'];
            },
        })
    };
    fastify.decorate('knex', knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('GET public/exchange-rates/currencies', () => {
    it.only('should get currency list', async () => {
        const exchageRates = await app.inject({
            method: 'GET',
            url: '/public/exchange-rates/currencies',
        });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQXdCQSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQ3JELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUF6QkosNENBQTREO0FBRTVELElBQUksR0FBb0IsQ0FBQztBQUV6QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNyQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHO1FBQ1QsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixPQUFPLEVBQUU7WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUNwQjtRQUNELEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDVCxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQzlDLENBQUM7U0FDSixDQUFDO0tBQ0wsQ0FBQTtJQUVELE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFBO0FBTUYsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2pCLEdBQUcsR0FBRyxNQUFNLElBQUEscUJBQVksR0FBRSxDQUFDO0FBRS9CLENBQUMsQ0FBQyxDQUFDO0FBRUgsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN6QixDQUFDLENBQUMsQ0FBQTtBQUVGLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNoQixNQUFNLElBQUEsb0JBQVcsR0FBRSxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFBO0FBRUYsUUFBUSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxFQUFFLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzNDLE1BQU0sWUFBWSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUNsQyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSxtQ0FBbUM7U0FDM0MsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbkMsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy90ZXN0L3VuaXQvcm91dGVzL3B1YmxpYy9nZXQtZXhjaGFuZ2UtcmF0ZXMtY3VycmVuY2llcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSBcImZhc3RpZnlcIjtcbmltcG9ydCB7IHN0YXJ0VGVzdEVudiwgc3RvcFRlc3RFbnYgfSBmcm9tIFwiLi4vLi4vLi4vaGVscGVyXCI7XG5cbmxldCBhcHA6IEZhc3RpZnlJbnN0YW5jZTtcblxuY29uc3QgZnAgPSByZXF1aXJlKCdmYXN0aWZ5LXBsdWdpbicpO1xuY29uc3Qga25leFBsdWdpbiA9IGZwKGFzeW5jIChmYXN0aWZ5OiBhbnksIG9wdGlvbnM6YW55KSA9PiB7XG4gICAgY29uc29sZS5sb2cob3B0aW9ucyk7XG4gICAgY29uc3Qga25leCA9IHsgXG4gICAgICAgIHJhdzogamVzdC5mbigpLFxuICAgICAgICBkZXN0cm95OiBqZXN0LmZuKCksXG4gICAgICAgIG1pZ3JhdGU6IHtcbiAgICAgICAgICAgIGxhdGVzdDogamVzdC5mbigpLFxuICAgICAgICB9LFxuICAgICAgICB0YWJsZTogKCkgPT4gKHtcbiAgICAgICAgICAgIHNlbGVjdDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBbJ0VVUicsICdVU0QnLCAnQVVEJywgJ1JVQicsICdKUFknXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmYXN0aWZ5LmRlY29yYXRlKCdrbmV4Jywga25leCk7XG59KVxuXG5qZXN0Lm1vY2soJy4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2tuZXgtcGx1Z2luJywgKCgpID0+IHtcbiAgcmV0dXJuIGtuZXhQbHVnaW47XG59KSk7XG5cbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgYXBwID0gYXdhaXQgc3RhcnRUZXN0RW52KCk7XG5cbn0pO1xuXG5iZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbn0pXG5cbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBzdG9wVGVzdEVudigpO1xufSlcblxuZGVzY3JpYmUoJ0dFVCBwdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvY3VycmVuY2llcycsICgpID0+IHtcbiAgICBpdC5vbmx5KCdzaG91bGQgZ2V0IGN1cnJlbmN5IGxpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4Y2hhZ2VSYXRlcyA9IGF3YWl0IGFwcC5pbmplY3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogJy9wdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvY3VycmVuY2llcycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGV4Y2hhZ2VSYXRlcy5zdGF0dXNDb2RlKTtcbiAgICAgICAgY29uc29sZS5sb2coZXhjaGFnZVJhdGVzLmJvZHkpO1xuXG4gICAgfSlcbn0pXG4iXSwidmVyc2lvbiI6M30=