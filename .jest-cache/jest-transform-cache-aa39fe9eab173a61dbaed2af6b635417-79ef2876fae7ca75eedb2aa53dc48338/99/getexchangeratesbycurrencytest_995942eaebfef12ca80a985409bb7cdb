88e76b49af5ce8417e1eacf0506b0c2c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('GET /public/exchange-rates', () => {
    describe("GET /public/exchange-rates/:currency", () => {
        it("should return 404 not found", async () => {
            const exchangeRates = await app.inject({
                method: "GET",
                url: "/public/exchange-rates/",
            });
            expect(exchangeRates.statusCode).toEqual(404);
        });
        it("should response exchange rates by currency", async () => {
            const data = [
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "117.201880",
                    exchange_date: "2023-01-22",
                },
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "116.201880",
                    exchange_date: "2023-01-21",
                },
                {
                    source_currency: "EUR",
                    target_currency: "RSD",
                    source_rate: "1",
                    target_rate: "115.201880",
                    exchange_date: "2023-01-20",
                },
                {
                    source_currency: "EUR",
                    target_currency: "JPY",
                    source_rate: "1",
                    target_rate: "120",
                    exchange_date: "2023-01-20",
                },
            ];
            knex.table = () => ({
                select: () => {
                    return [{ rates: JSON.stringify(data), posting_date: "2024-01-20" }];
                },
            });
            const exchangeRates = await app.inject({
                method: "GET",
                url: "/public/exchange-rates/RSD",
            });
            expect(exchangeRates.statusCode).toBe(200);
            expect(JSON.parse(exchangeRates.body)).toEqual({
                data: {
                    RSD: [
                        { date: "2023-01-22", source_rate: "1", target_rate: "117.201880" },
                        { date: "2023-01-21", source_rate: "1", target_rate: "116.201880" },
                        { date: "2023-01-20", source_rate: "1", target_rate: "115.201880" },
                    ],
                },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWJ5LWN1cnJlbmN5LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFlQSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxPQUFPLFVBQVUsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQztBQWhCSCw0Q0FJeUI7QUFDekIsb0VBQWdDO0FBRWhDLElBQUksR0FBb0IsQ0FBQztBQUN6QixJQUFJLElBQUksR0FBRyxJQUFBLG1DQUEwQixHQUFFLENBQUM7QUFFeEMsTUFBTSxVQUFVLEdBQUcsSUFBQSx3QkFBRSxFQUFDLEtBQUssRUFBRSxPQUFZLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDdkQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFNSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDakIsR0FBRyxHQUFHLE1BQU0sSUFBQSxxQkFBWSxHQUFFLENBQUM7QUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2hCLE1BQU0sSUFBQSxvQkFBVyxHQUFFLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDbEQsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pDLE1BQU0sYUFBYSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQztnQkFDbkMsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsR0FBRyxFQUFFLHlCQUF5QjthQUNqQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN4RCxNQUFNLElBQUksR0FBRztnQkFDVDtvQkFDSSxlQUFlLEVBQUUsS0FBSztvQkFDdEIsZUFBZSxFQUFFLEtBQUs7b0JBQ3RCLFdBQVcsRUFBRSxHQUFHO29CQUNoQixXQUFXLEVBQUUsWUFBWTtvQkFDekIsYUFBYSxFQUFFLFlBQVk7aUJBQzlCO2dCQUNEO29CQUNJLGVBQWUsRUFBRSxLQUFLO29CQUN0QixlQUFlLEVBQUUsS0FBSztvQkFDdEIsV0FBVyxFQUFFLEdBQUc7b0JBQ2hCLFdBQVcsRUFBRSxZQUFZO29CQUN6QixhQUFhLEVBQUUsWUFBWTtpQkFDOUI7Z0JBQ0Q7b0JBQ0ksZUFBZSxFQUFFLEtBQUs7b0JBQ3RCLGVBQWUsRUFBRSxLQUFLO29CQUN0QixXQUFXLEVBQUUsR0FBRztvQkFDaEIsV0FBVyxFQUFFLFlBQVk7b0JBQ3pCLGFBQWEsRUFBRSxZQUFZO2lCQUM5QjtnQkFDRDtvQkFDSSxlQUFlLEVBQUUsS0FBSztvQkFDdEIsZUFBZSxFQUFFLEtBQUs7b0JBQ3RCLFdBQVcsRUFBRSxHQUFHO29CQUNoQixXQUFXLEVBQUUsS0FBSztvQkFDbEIsYUFBYSxFQUFFLFlBQVk7aUJBQzlCO2FBQ0osQ0FBQztZQUVGLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxFQUFFLEdBQUcsRUFBRTtvQkFDVCxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztnQkFDekUsQ0FBQzthQUNKLENBQUMsQ0FBQztZQUVILE1BQU0sYUFBYSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQztnQkFDbkMsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsR0FBRyxFQUFFLDRCQUE0QjthQUNwQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQzNDLElBQUksRUFBRTtvQkFDRixHQUFHLEVBQUU7d0JBQ0QsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRTt3QkFDbkUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRTt3QkFDbkUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRTtxQkFDdEU7aUJBQ0o7YUFDSixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWJ5LWN1cnJlbmN5LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSBcImZhc3RpZnlcIjtcbmltcG9ydCB7XG4gICAgZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMsXG4gICAgc3RhcnRUZXN0RW52LFxuICAgIHN0b3BUZXN0RW52LFxufSBmcm9tIFwiLi4vLi4vLi4vaGVscGVyXCI7XG5pbXBvcnQgZnAgZnJvbSBcImZhc3RpZnktcGx1Z2luXCI7XG5cbmxldCBhcHA6IEZhc3RpZnlJbnN0YW5jZTtcbmxldCBrbmV4ID0gZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMoKTtcblxuY29uc3Qga25leFBsdWdpbiA9IGZwKGFzeW5jIChmYXN0aWZ5OiBhbnksIG9wdGlvbnM6IGFueSkgPT4ge1xuICAgIGZhc3RpZnkuZGVjb3JhdGUoXCJrbmV4XCIsIGtuZXgpO1xufSk7XG5cbmplc3QubW9jayhcIi4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2tuZXgtcGx1Z2luXCIsICgpID0+IHtcbiAgICByZXR1cm4ga25leFBsdWdpbjtcbn0pO1xuXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGFwcCA9IGF3YWl0IHN0YXJ0VGVzdEVudigpO1xufSk7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xufSk7XG5cbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBzdG9wVGVzdEVudigpO1xufSk7XG5cbmRlc2NyaWJlKCdHRVQgL3B1YmxpYy9leGNoYW5nZS1yYXRlcycsICgpID0+IHtcbiAgICBkZXNjcmliZShcIkdFVCAvcHVibGljL2V4Y2hhbmdlLXJhdGVzLzpjdXJyZW5jeVwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwic2hvdWxkIHJldHVybiA0MDQgbm90IGZvdW5kXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4Y2hhbmdlUmF0ZXMgPSBhd2FpdCBhcHAuaW5qZWN0KHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9wdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvXCIsXG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdChleGNoYW5nZVJhdGVzLnN0YXR1c0NvZGUpLnRvRXF1YWwoNDA0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwic2hvdWxkIHJlc3BvbnNlIGV4Y2hhbmdlIHJhdGVzIGJ5IGN1cnJlbmN5XCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldF9jdXJyZW5jeTogXCJSU0RcIixcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3JhdGU6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfcmF0ZTogXCIxMTcuMjAxODgwXCIsXG4gICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlX2RhdGU6IFwiMjAyMy0wMS0yMlwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldF9jdXJyZW5jeTogXCJSU0RcIixcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3JhdGU6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfcmF0ZTogXCIxMTYuMjAxODgwXCIsXG4gICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlX2RhdGU6IFwiMjAyMy0wMS0yMVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldF9jdXJyZW5jeTogXCJSU0RcIixcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3JhdGU6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfcmF0ZTogXCIxMTUuMjAxODgwXCIsXG4gICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlX2RhdGU6IFwiMjAyMy0wMS0yMFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldF9jdXJyZW5jeTogXCJKUFlcIixcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3JhdGU6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfcmF0ZTogXCIxMjBcIixcbiAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2VfZGF0ZTogXCIyMDIzLTAxLTIwXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgXG4gICAgICAgICAgICBrbmV4LnRhYmxlID0gKCkgPT4gKHtcbiAgICAgICAgICAgICAgICBzZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt7IHJhdGVzOiBKU09OLnN0cmluZ2lmeShkYXRhKSwgcG9zdGluZ19kYXRlOiBcIjIwMjQtMDEtMjBcIiB9XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBleGNoYW5nZVJhdGVzID0gYXdhaXQgYXBwLmluamVjdCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgIHVybDogXCIvcHVibGljL2V4Y2hhbmdlLXJhdGVzL1JTRFwiLFxuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICBleHBlY3QoZXhjaGFuZ2VSYXRlcy5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XG4gICAgICAgICAgICBleHBlY3QoSlNPTi5wYXJzZShleGNoYW5nZVJhdGVzLmJvZHkpKS50b0VxdWFsKHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIFJTRDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgeyBkYXRlOiBcIjIwMjMtMDEtMjJcIiwgc291cmNlX3JhdGU6IFwiMVwiLCB0YXJnZXRfcmF0ZTogXCIxMTcuMjAxODgwXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgZGF0ZTogXCIyMDIzLTAxLTIxXCIsIHNvdXJjZV9yYXRlOiBcIjFcIiwgdGFyZ2V0X3JhdGU6IFwiMTE2LjIwMTg4MFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGRhdGU6IFwiMjAyMy0wMS0yMFwiLCBzb3VyY2VfcmF0ZTogXCIxXCIsIHRhcmdldF9yYXRlOiBcIjExNS4yMDE4ODBcIiB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KVxuIl0sInZlcnNpb24iOjN9