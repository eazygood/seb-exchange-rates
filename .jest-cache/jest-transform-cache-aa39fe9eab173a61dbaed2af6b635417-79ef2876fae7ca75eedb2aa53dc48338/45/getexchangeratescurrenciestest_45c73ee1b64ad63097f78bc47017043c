9ce1386ec9ed93d445f3d30e80708122
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../../../src/plugins/knex-plugin', (() => {
    return knexPlugin;
}));
const helper_1 = require("../../../helper");
let app;
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    console.log(options);
    const knex = {
        raw: jest.fn(),
        destroy: jest.fn(),
        migrate: {
            latest: jest.fn(),
        },
        table: () => ({
            select: () => {
                return [{ currency: 'EUR' }, { currency: 'USD' }, { currency: 'AUD' }, { currency: 'RUB' }, { currency: 'JPY' }];
            },
        })
    };
    fastify.decorate('knex', knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('GET public/exchange-rates/currencies', () => {
    it.only('should get currency list', async () => {
        const exchageRates = await app.inject({
            method: 'GET',
            url: '/public/exchange-rates/currencies',
        });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQXdCQSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQ3JELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUF6QkosNENBQTREO0FBRTVELElBQUksR0FBb0IsQ0FBQztBQUV6QixvRUFBZ0M7QUFDaEMsTUFBTSxVQUFVLEdBQUcsSUFBQSx3QkFBRSxFQUFDLEtBQUssRUFBRSxPQUFZLEVBQUUsT0FBVyxFQUFFLEVBQUU7SUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQixNQUFNLElBQUksR0FBRztRQUNULEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2QsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDbEIsT0FBTyxFQUFFO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDcEI7UUFDRCxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNWLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsT0FBTyxDQUFDLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxFQUFDLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUE7WUFDekcsQ0FBQztTQUNKLENBQUM7S0FDTCxDQUFBO0lBRUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUE7QUFNRixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDakIsR0FBRyxHQUFHLE1BQU0sSUFBQSxxQkFBWSxHQUFFLENBQUM7QUFFL0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFBO0FBRUYsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2hCLE1BQU0sSUFBQSxvQkFBVyxHQUFFLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUE7QUFFRixRQUFRLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ2xELEVBQUUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ2xDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLG1DQUFtQztTQUMzQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuQyxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL3Rlc3QvdW5pdC9yb3V0ZXMvcHVibGljL2dldC1leGNoYW5nZS1yYXRlcy1jdXJyZW5jaWVzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeVwiO1xuaW1wb3J0IHsgc3RhcnRUZXN0RW52LCBzdG9wVGVzdEVudiB9IGZyb20gXCIuLi8uLi8uLi9oZWxwZXJcIjtcblxubGV0IGFwcDogRmFzdGlmeUluc3RhbmNlO1xuXG5pbXBvcnQgZnAgZnJvbSAnZmFzdGlmeS1wbHVnaW4nO1xuY29uc3Qga25leFBsdWdpbiA9IGZwKGFzeW5jIChmYXN0aWZ5OiBhbnksIG9wdGlvbnM6YW55KSA9PiB7XG4gICAgY29uc29sZS5sb2cob3B0aW9ucyk7XG4gICAgY29uc3Qga25leCA9IHsgXG4gICAgICAgIHJhdzogamVzdC5mbigpLFxuICAgICAgICBkZXN0cm95OiBqZXN0LmZuKCksXG4gICAgICAgIG1pZ3JhdGU6IHtcbiAgICAgICAgICAgIGxhdGVzdDogamVzdC5mbigpLFxuICAgICAgICB9LFxuICAgICAgICB0YWJsZTogKCkgPT4gKHtcbiAgICAgICAgICAgIHNlbGVjdDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBbe2N1cnJlbmN5OiAnRVVSJ30sIHtjdXJyZW5jeTogJ1VTRCd9LCB7Y3VycmVuY3k6ICdBVUQnfSwge2N1cnJlbmN5OiAnUlVCJ30se2N1cnJlbmN5OiAnSlBZJ31dXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZhc3RpZnkuZGVjb3JhdGUoJ2tuZXgnLCBrbmV4KTtcbn0pXG5cbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva25leC1wbHVnaW4nLCAoKCkgPT4ge1xuICByZXR1cm4ga25leFBsdWdpbjtcbn0pKTtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhcHAgPSBhd2FpdCBzdGFydFRlc3RFbnYoKTtcblxufSk7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xufSlcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHN0b3BUZXN0RW52KCk7XG59KVxuXG5kZXNjcmliZSgnR0VUIHB1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzJywgKCkgPT4ge1xuICAgIGl0Lm9ubHkoJ3Nob3VsZCBnZXQgY3VycmVuY3kgbGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZXhjaGFnZVJhdGVzID0gYXdhaXQgYXBwLmluamVjdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnL3B1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coZXhjaGFnZVJhdGVzLnN0YXR1c0NvZGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuYm9keSk7XG5cbiAgICB9KVxufSlcbiJdLCJ2ZXJzaW9uIjozfQ==