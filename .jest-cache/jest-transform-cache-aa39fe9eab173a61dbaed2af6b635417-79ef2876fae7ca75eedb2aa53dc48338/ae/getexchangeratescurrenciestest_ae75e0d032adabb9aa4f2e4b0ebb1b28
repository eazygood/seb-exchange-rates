f10944c48cc24365c0242ff8e38de187
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe("GET public/exchange-rates/currencies", () => {
    it.only("should get currency list", async () => {
        knex.table = () => ({
            select: () => [
                { currency: "EUR" },
                { currency: "USD" },
                { currency: "JPY" },
            ],
        });
        const exchageRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates/currencies",
            headers: {
                "content-type": 'application/json'
            }
        });
        expect(exchageRates.statusCode).toBe(200);
        expect(exchageRates.body).toEqual({ data: ["EUR", "USD", "JPY"] });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQWVBLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBaEJILDRDQUl5QjtBQUN6QixvRUFBZ0M7QUFFaEMsSUFBSSxHQUFvQixDQUFDO0FBQ3pCLElBQUksSUFBSSxHQUFHLElBQUEsbUNBQTBCLEdBQUUsQ0FBQztBQUV4QyxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFFLEVBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFZLEVBQUUsRUFBRTtJQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUMsQ0FBQztBQU1ILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQixHQUFHLEdBQUcsTUFBTSxJQUFBLHFCQUFZLEdBQUUsQ0FBQztBQUM3QixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDcEQsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDbEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNaLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtnQkFDbkIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO2dCQUNuQixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7YUFDcEI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDcEMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsbUNBQW1DO1lBQ3hDLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsa0JBQWtCO2FBQ25DO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL3Rlc3QvdW5pdC9yb3V0ZXMvcHVibGljL2dldC1leGNoYW5nZS1yYXRlcy1jdXJyZW5jaWVzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmFzdGlmeSwgdHlwZSBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeVwiO1xuaW1wb3J0IHtcbiAgZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMsXG4gIHN0YXJ0VGVzdEVudixcbiAgc3RvcFRlc3RFbnYsXG59IGZyb20gXCIuLi8uLi8uLi9oZWxwZXJcIjtcbmltcG9ydCBmcCBmcm9tIFwiZmFzdGlmeS1wbHVnaW5cIjtcblxubGV0IGFwcDogRmFzdGlmeUluc3RhbmNlO1xubGV0IGtuZXggPSBnZXREZWZhdWx0S25leFBsdWdpblBhcmFtcygpO1xuXG5jb25zdCBrbmV4UGx1Z2luID0gZnAoYXN5bmMgKGZhc3RpZnk6IGFueSwgb3B0aW9uczogYW55KSA9PiB7XG4gIGZhc3RpZnkuZGVjb3JhdGUoXCJrbmV4XCIsIGtuZXgpO1xufSk7XG5cbmplc3QubW9jayhcIi4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2tuZXgtcGx1Z2luXCIsICgpID0+IHtcbiAgcmV0dXJuIGtuZXhQbHVnaW47XG59KTtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgYXBwID0gYXdhaXQgc3RhcnRUZXN0RW52KCk7XG59KTtcblxuYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gIGplc3QucmVzZXRBbGxNb2NrcygpO1xufSk7XG5cbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgYXdhaXQgc3RvcFRlc3RFbnYoKTtcbn0pO1xuXG5kZXNjcmliZShcIkdFVCBwdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvY3VycmVuY2llc1wiLCAoKSA9PiB7XG4gIGl0Lm9ubHkoXCJzaG91bGQgZ2V0IGN1cnJlbmN5IGxpc3RcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGtuZXgudGFibGUgPSAoKSA9PiAoe1xuICAgICAgc2VsZWN0OiAoKSA9PiBbXG4gICAgICAgIHsgY3VycmVuY3k6IFwiRVVSXCIgfSxcbiAgICAgICAgeyBjdXJyZW5jeTogXCJVU0RcIiB9LFxuICAgICAgICB7IGN1cnJlbmN5OiBcIkpQWVwiIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXhjaGFnZVJhdGVzID0gYXdhaXQgYXBwLmluamVjdCh7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICB1cmw6IFwiL3B1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhwZWN0KGV4Y2hhZ2VSYXRlcy5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KGV4Y2hhZ2VSYXRlcy5ib2R5KS50b0VxdWFsKHsgZGF0YTogW1wiRVVSXCIsIFwiVVNEXCIsIFwiSlBZXCJdIH0pO1xuICAgIGNvbnNvbGUubG9nKGV4Y2hhZ2VSYXRlcy5zdGF0dXNDb2RlKTtcbiAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuYm9keSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=