07294d2ac8a65ccf042d7f693696350c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe("GET /public/exchange-rates/:currency", () => {
    it("should return 404 not found", async () => {
        const exchangeRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates",
        });
        expect(exchangeRates.statusCode).toEqual(404);
    });
    it("should response exchange rates by currency", async () => {
        const data = [
            {
                source_currency: "EUR",
                target_currency: "RSD",
                source_rate: "1",
                target_rate: "117.201880",
                exchange_date: "2023-01-22",
            },
            {
                source_currency: "EUR",
                target_currency: "RSD",
                source_rate: "1",
                target_rate: "116.201880",
                exchange_date: "2023-01-21",
            },
            {
                source_currency: "EUR",
                target_currency: "RSD",
                source_rate: "1",
                target_rate: "115.201880",
                exchange_date: "2023-01-20",
            },
            {
                source_currency: "EUR",
                target_currency: "JPY",
                source_rate: "1",
                target_rate: "120",
                exchange_date: "2023-01-20",
            },
        ];
        knex.table = () => ({
            select: () => {
                return [{ rates: JSON.stringify(data), posting_date: "2024-01-20" }];
            },
        });
        const exchangeRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates/RSD",
        });
        expect(exchangeRates.statusCode).toBe(200);
        expect(JSON.parse(exchangeRates.body)).toEqual({
            data: {
                RSD: [
                    { date: "2023-01-22", source_rate: "1", target_rate: "117.201880" },
                    { date: "2023-01-21", source_rate: "1", target_rate: "116.201880" },
                    { date: "2023-01-20", source_rate: "1", target_rate: "115.201880" },
                ],
            },
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWJ5LWN1cnJlbmN5LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFlQSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtJQUNwRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDLENBQUMsQ0FBQztBQWhCSCw0Q0FJeUI7QUFDekIsb0VBQWdDO0FBRWhDLElBQUksR0FBb0IsQ0FBQztBQUN6QixJQUFJLElBQUksR0FBRyxJQUFBLG1DQUEwQixHQUFFLENBQUM7QUFFeEMsTUFBTSxVQUFVLEdBQUcsSUFBQSx3QkFBRSxFQUFDLEtBQUssRUFBRSxPQUFZLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDekQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFNSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbkIsR0FBRyxHQUFHLE1BQU0sSUFBQSxxQkFBWSxHQUFFLENBQUM7QUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDcEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2xCLE1BQU0sSUFBQSxvQkFBVyxHQUFFLENBQUM7QUFDdEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzQyxNQUFNLGFBQWEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDbkMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsd0JBQXdCO1NBQzlCLENBQUMsQ0FBQztRQUVMLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFELE1BQU0sSUFBSSxHQUFHO1lBQ1g7Z0JBQ0UsZUFBZSxFQUFFLEtBQUs7Z0JBQ3RCLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixXQUFXLEVBQUUsR0FBRztnQkFDaEIsV0FBVyxFQUFFLFlBQVk7Z0JBQ3pCLGFBQWEsRUFBRSxZQUFZO2FBQzVCO1lBQ0Q7Z0JBQ0UsZUFBZSxFQUFFLEtBQUs7Z0JBQ3RCLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixXQUFXLEVBQUUsR0FBRztnQkFDaEIsV0FBVyxFQUFFLFlBQVk7Z0JBQ3pCLGFBQWEsRUFBRSxZQUFZO2FBQzVCO1lBQ0Q7Z0JBQ0UsZUFBZSxFQUFFLEtBQUs7Z0JBQ3RCLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixXQUFXLEVBQUUsR0FBRztnQkFDaEIsV0FBVyxFQUFFLFlBQVk7Z0JBQ3pCLGFBQWEsRUFBRSxZQUFZO2FBQzVCO1lBQ0Q7Z0JBQ0UsZUFBZSxFQUFFLEtBQUs7Z0JBQ3RCLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixXQUFXLEVBQUUsR0FBRztnQkFDaEIsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLGFBQWEsRUFBRSxZQUFZO2FBQzVCO1NBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNsQixNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZFLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLGFBQWEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDckMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsNEJBQTRCO1NBQ2xDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUM3QyxJQUFJLEVBQUU7Z0JBQ0osR0FBRyxFQUFFO29CQUNILEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUU7b0JBQ25FLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUU7b0JBQ25FLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUU7aUJBQ3BFO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL3Rlc3QvdW5pdC9yb3V0ZXMvcHVibGljL2dldC1leGNoYW5nZS1yYXRlcy1ieS1jdXJyZW5jeS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZhc3RpZnksIHR5cGUgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSBcImZhc3RpZnlcIjtcbmltcG9ydCB7XG4gIGdldERlZmF1bHRLbmV4UGx1Z2luUGFyYW1zLFxuICBzdGFydFRlc3RFbnYsXG4gIHN0b3BUZXN0RW52LFxufSBmcm9tIFwiLi4vLi4vLi4vaGVscGVyXCI7XG5pbXBvcnQgZnAgZnJvbSBcImZhc3RpZnktcGx1Z2luXCI7XG5cbmxldCBhcHA6IEZhc3RpZnlJbnN0YW5jZTtcbmxldCBrbmV4ID0gZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMoKTtcblxuY29uc3Qga25leFBsdWdpbiA9IGZwKGFzeW5jIChmYXN0aWZ5OiBhbnksIG9wdGlvbnM6IGFueSkgPT4ge1xuICBmYXN0aWZ5LmRlY29yYXRlKFwia25leFwiLCBrbmV4KTtcbn0pO1xuXG5qZXN0Lm1vY2soXCIuLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9rbmV4LXBsdWdpblwiLCAoKSA9PiB7XG4gIHJldHVybiBrbmV4UGx1Z2luO1xufSk7XG5cbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gIGFwcCA9IGF3YWl0IHN0YXJ0VGVzdEVudigpO1xufSk7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHN0b3BUZXN0RW52KCk7XG59KTtcblxuZGVzY3JpYmUoXCJHRVQgL3B1YmxpYy9leGNoYW5nZS1yYXRlcy86Y3VycmVuY3lcIiwgKCkgPT4ge1xuICBpdChcInNob3VsZCByZXR1cm4gNDA0IG5vdCBmb3VuZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZXhjaGFuZ2VSYXRlcyA9IGF3YWl0IGFwcC5pbmplY3Qoe1xuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHVybDogXCIvcHVibGljL2V4Y2hhbmdlLXJhdGVzXCIsXG4gICAgICB9KTtcblxuICAgIGV4cGVjdChleGNoYW5nZVJhdGVzLnN0YXR1c0NvZGUpLnRvRXF1YWwoNDA0KTtcbiAgfSk7XG4gIGl0KFwic2hvdWxkIHJlc3BvbnNlIGV4Y2hhbmdlIHJhdGVzIGJ5IGN1cnJlbmN5XCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhID0gW1xuICAgICAge1xuICAgICAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgICAgIHRhcmdldF9jdXJyZW5jeTogXCJSU0RcIixcbiAgICAgICAgc291cmNlX3JhdGU6IFwiMVwiLFxuICAgICAgICB0YXJnZXRfcmF0ZTogXCIxMTcuMjAxODgwXCIsXG4gICAgICAgIGV4Y2hhbmdlX2RhdGU6IFwiMjAyMy0wMS0yMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc291cmNlX2N1cnJlbmN5OiBcIkVVUlwiLFxuICAgICAgICB0YXJnZXRfY3VycmVuY3k6IFwiUlNEXCIsXG4gICAgICAgIHNvdXJjZV9yYXRlOiBcIjFcIixcbiAgICAgICAgdGFyZ2V0X3JhdGU6IFwiMTE2LjIwMTg4MFwiLFxuICAgICAgICBleGNoYW5nZV9kYXRlOiBcIjIwMjMtMDEtMjFcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNvdXJjZV9jdXJyZW5jeTogXCJFVVJcIixcbiAgICAgICAgdGFyZ2V0X2N1cnJlbmN5OiBcIlJTRFwiLFxuICAgICAgICBzb3VyY2VfcmF0ZTogXCIxXCIsXG4gICAgICAgIHRhcmdldF9yYXRlOiBcIjExNS4yMDE4ODBcIixcbiAgICAgICAgZXhjaGFuZ2VfZGF0ZTogXCIyMDIzLTAxLTIwXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgICAgIHRhcmdldF9jdXJyZW5jeTogXCJKUFlcIixcbiAgICAgICAgc291cmNlX3JhdGU6IFwiMVwiLFxuICAgICAgICB0YXJnZXRfcmF0ZTogXCIxMjBcIixcbiAgICAgICAgZXhjaGFuZ2VfZGF0ZTogXCIyMDIzLTAxLTIwXCIsXG4gICAgICB9LFxuICAgIF07XG5cbiAgICBrbmV4LnRhYmxlID0gKCkgPT4gKHtcbiAgICAgIHNlbGVjdDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gW3sgcmF0ZXM6IEpTT04uc3RyaW5naWZ5KGRhdGEpLCBwb3N0aW5nX2RhdGU6IFwiMjAyNC0wMS0yMFwiIH1dO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGV4Y2hhbmdlUmF0ZXMgPSBhd2FpdCBhcHAuaW5qZWN0KHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIHVybDogXCIvcHVibGljL2V4Y2hhbmdlLXJhdGVzL1JTRFwiLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KGV4Y2hhbmdlUmF0ZXMuc3RhdHVzQ29kZSkudG9CZSgyMDApO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKGV4Y2hhbmdlUmF0ZXMuYm9keSkpLnRvRXF1YWwoe1xuICAgICAgZGF0YToge1xuICAgICAgICBSU0Q6IFtcbiAgICAgICAgICB7IGRhdGU6IFwiMjAyMy0wMS0yMlwiLCBzb3VyY2VfcmF0ZTogXCIxXCIsIHRhcmdldF9yYXRlOiBcIjExNy4yMDE4ODBcIiB9LFxuICAgICAgICAgIHsgZGF0ZTogXCIyMDIzLTAxLTIxXCIsIHNvdXJjZV9yYXRlOiBcIjFcIiwgdGFyZ2V0X3JhdGU6IFwiMTE2LjIwMTg4MFwiIH0sXG4gICAgICAgICAgeyBkYXRlOiBcIjIwMjMtMDEtMjBcIiwgc291cmNlX3JhdGU6IFwiMVwiLCB0YXJnZXRfcmF0ZTogXCIxMTUuMjAxODgwXCIgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=