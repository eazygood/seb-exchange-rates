5d39418749af31ec60d6e1a01b2688b7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe("GET /public/exchange-rates/:currency", () => {
    it("should response exchange rates by currency", async () => {
        const data = [
            {
                source_currency: "EUR",
                target_currency: "RSD",
                source_rate: "1",
                target_rate: "117.201880",
                exchange_date: "2023-01-22",
            },
            {
                source_currency: "EUR",
                target_currency: "RSD",
                source_rate: "1",
                target_rate: "116.201880",
                exchange_date: "2023-01-21",
            },
            {
                source_currency: "EUR",
                target_currency: "RSD",
                source_rate: "1",
                target_rate: "115.201880",
                exchange_date: "2023-01-20",
            },
            {
                source_currency: "EUR",
                target_currency: "JPY",
                source_rate: "1",
                target_rate: "120",
                exchange_date: "2023-01-20",
            },
        ];
        knex.table = () => {
            select: () => {
                return [{ rates: JSON.stringify(data), posting_date: "2024-01-20" }];
            };
        };
        const exchageRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates/RSD",
        });
        console.log(exchageRates.body);
        expect(exchageRates.statusCode).toBe(200);
        // expect(JSON.parse(exchageRates.body)).toEqual({
        //   data: ["EUR", "USD", "JPY"],
        // });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWJ5LWN1cnJlbmN5LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFlQSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtJQUNwRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDLENBQUMsQ0FBQztBQWhCSCw0Q0FJeUI7QUFDekIsb0VBQWdDO0FBRWhDLElBQUksR0FBb0IsQ0FBQztBQUN6QixJQUFJLElBQUksR0FBRyxJQUFBLG1DQUEwQixHQUFFLENBQUM7QUFFeEMsTUFBTSxVQUFVLEdBQUcsSUFBQSx3QkFBRSxFQUFDLEtBQUssRUFBRSxPQUFZLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDekQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFNSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbkIsR0FBRyxHQUFHLE1BQU0sSUFBQSxxQkFBWSxHQUFFLENBQUM7QUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDcEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2xCLE1BQU0sSUFBQSxvQkFBVyxHQUFFLENBQUM7QUFDdEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMxRCxNQUFNLElBQUksR0FBRztZQUNYO2dCQUNFLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixlQUFlLEVBQUUsS0FBSztnQkFDdEIsV0FBVyxFQUFFLEdBQUc7Z0JBQ2hCLFdBQVcsRUFBRSxZQUFZO2dCQUN6QixhQUFhLEVBQUUsWUFBWTthQUM1QjtZQUNEO2dCQUNFLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixlQUFlLEVBQUUsS0FBSztnQkFDdEIsV0FBVyxFQUFFLEdBQUc7Z0JBQ2hCLFdBQVcsRUFBRSxZQUFZO2dCQUN6QixhQUFhLEVBQUUsWUFBWTthQUM1QjtZQUNEO2dCQUNFLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixlQUFlLEVBQUUsS0FBSztnQkFDdEIsV0FBVyxFQUFFLEdBQUc7Z0JBQ2hCLFdBQVcsRUFBRSxZQUFZO2dCQUN6QixhQUFhLEVBQUUsWUFBWTthQUM1QjtZQUNEO2dCQUNFLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixlQUFlLEVBQUUsS0FBSztnQkFDdEIsV0FBVyxFQUFFLEdBQUc7Z0JBQ2hCLFdBQVcsRUFBRSxLQUFLO2dCQUNsQixhQUFhLEVBQUUsWUFBWTthQUM1QjtTQUNGLENBQUM7UUFFRixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRTtZQUNoQixNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQztRQUVGLE1BQU0sWUFBWSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUNwQyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSw0QkFBNEI7U0FDbEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsa0RBQWtEO1FBQ2xELGlDQUFpQztRQUNqQyxNQUFNO0lBQ1IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy90ZXN0L3VuaXQvcm91dGVzL3B1YmxpYy9nZXQtZXhjaGFuZ2UtcmF0ZXMtYnktY3VycmVuY3kudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmYXN0aWZ5LCB0eXBlIEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gXCJmYXN0aWZ5XCI7XG5pbXBvcnQge1xuICBnZXREZWZhdWx0S25leFBsdWdpblBhcmFtcyxcbiAgc3RhcnRUZXN0RW52LFxuICBzdG9wVGVzdEVudixcbn0gZnJvbSBcIi4uLy4uLy4uL2hlbHBlclwiO1xuaW1wb3J0IGZwIGZyb20gXCJmYXN0aWZ5LXBsdWdpblwiO1xuXG5sZXQgYXBwOiBGYXN0aWZ5SW5zdGFuY2U7XG5sZXQga25leCA9IGdldERlZmF1bHRLbmV4UGx1Z2luUGFyYW1zKCk7XG5cbmNvbnN0IGtuZXhQbHVnaW4gPSBmcChhc3luYyAoZmFzdGlmeTogYW55LCBvcHRpb25zOiBhbnkpID0+IHtcbiAgZmFzdGlmeS5kZWNvcmF0ZShcImtuZXhcIiwga25leCk7XG59KTtcblxuamVzdC5tb2NrKFwiLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva25leC1wbHVnaW5cIiwgKCkgPT4ge1xuICByZXR1cm4ga25leFBsdWdpbjtcbn0pO1xuXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICBhcHAgPSBhd2FpdCBzdGFydFRlc3RFbnYoKTtcbn0pO1xuXG5iZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgamVzdC5yZXNldEFsbE1vY2tzKCk7XG59KTtcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBzdG9wVGVzdEVudigpO1xufSk7XG5cbmRlc2NyaWJlKFwiR0VUIC9wdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvOmN1cnJlbmN5XCIsICgpID0+IHtcbiAgaXQoXCJzaG91bGQgcmVzcG9uc2UgZXhjaGFuZ2UgcmF0ZXMgYnkgY3VycmVuY3lcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIHNvdXJjZV9jdXJyZW5jeTogXCJFVVJcIixcbiAgICAgICAgdGFyZ2V0X2N1cnJlbmN5OiBcIlJTRFwiLFxuICAgICAgICBzb3VyY2VfcmF0ZTogXCIxXCIsXG4gICAgICAgIHRhcmdldF9yYXRlOiBcIjExNy4yMDE4ODBcIixcbiAgICAgICAgZXhjaGFuZ2VfZGF0ZTogXCIyMDIzLTAxLTIyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgICAgIHRhcmdldF9jdXJyZW5jeTogXCJSU0RcIixcbiAgICAgICAgc291cmNlX3JhdGU6IFwiMVwiLFxuICAgICAgICB0YXJnZXRfcmF0ZTogXCIxMTYuMjAxODgwXCIsXG4gICAgICAgIGV4Y2hhbmdlX2RhdGU6IFwiMjAyMy0wMS0yMVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc291cmNlX2N1cnJlbmN5OiBcIkVVUlwiLFxuICAgICAgICB0YXJnZXRfY3VycmVuY3k6IFwiUlNEXCIsXG4gICAgICAgIHNvdXJjZV9yYXRlOiBcIjFcIixcbiAgICAgICAgdGFyZ2V0X3JhdGU6IFwiMTE1LjIwMTg4MFwiLFxuICAgICAgICBleGNoYW5nZV9kYXRlOiBcIjIwMjMtMDEtMjBcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNvdXJjZV9jdXJyZW5jeTogXCJFVVJcIixcbiAgICAgICAgdGFyZ2V0X2N1cnJlbmN5OiBcIkpQWVwiLFxuICAgICAgICBzb3VyY2VfcmF0ZTogXCIxXCIsXG4gICAgICAgIHRhcmdldF9yYXRlOiBcIjEyMFwiLFxuICAgICAgICBleGNoYW5nZV9kYXRlOiBcIjIwMjMtMDEtMjBcIixcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIGtuZXgudGFibGUgPSAoKSA9PiB7XG4gICAgICBzZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIFt7IHJhdGVzOiBKU09OLnN0cmluZ2lmeShkYXRhKSwgcG9zdGluZ19kYXRlOiBcIjIwMjQtMDEtMjBcIiB9XTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIGNvbnN0IGV4Y2hhZ2VSYXRlcyA9IGF3YWl0IGFwcC5pbmplY3Qoe1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgdXJsOiBcIi9wdWJsaWMvZXhjaGFuZ2UtcmF0ZXMvUlNEXCIsXG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuYm9keSk7XG4gICAgZXhwZWN0KGV4Y2hhZ2VSYXRlcy5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XG4gICAgLy8gZXhwZWN0KEpTT04ucGFyc2UoZXhjaGFnZVJhdGVzLmJvZHkpKS50b0VxdWFsKHtcbiAgICAvLyAgIGRhdGE6IFtcIkVVUlwiLCBcIlVTRFwiLCBcIkpQWVwiXSxcbiAgICAvLyB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==