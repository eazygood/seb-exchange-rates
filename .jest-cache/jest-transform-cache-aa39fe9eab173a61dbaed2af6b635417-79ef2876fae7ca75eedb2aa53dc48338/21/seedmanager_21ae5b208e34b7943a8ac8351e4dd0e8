9205dddd1bc113a027bb1631102b9c07
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.populateDbWithCurrency = exports.populateDbWithExchangeRates = void 0;
const mysql_adapter_1 = require("../adapters/mysql-adapter");
const exchange_rate_repository_1 = require("../repositories/exchange-rate-repository");
const datetime_1 = require("../utils/datetime");
const currencies_repository_1 = require("../repositories/currencies-repository");
const xml_to_json_1 = __importDefault(require("../utils/xml-to-json"));
const EXCHNAGE_RATE_URL = "https://www.lb.lt/webservices/FxRates/FxRates.asmx/getCurrentFxRates";
const EXCHNAGE_RATE_BY_DATE_URL = "https://www.lb.lt/webservices/FxRates/FxRates.asmx/getFxRates";
const populateDbWithExchangeRates = async (app, date) => {
    const body = date ? `tp=EU&dt=${date}` : "tp=EU";
    const url = date ? EXCHNAGE_RATE_BY_DATE_URL : EXCHNAGE_RATE_URL;
    const response = await fetch(url, {
        headers: {
            "content-type": "application/x-www-form-urlencoded",
        },
        method: "POST",
        body,
    });
    const xml = await response.text();
    const exchangeRatesJson = (await (0, xml_to_json_1.default)(xml));
    const fxrates = exchangeRatesJson.FxRates.FxRate.map((rate) => {
        const date = rate.Dt;
        const [source, target] = rate.CcyAmt;
        const { Ccy: sourceCurreny, Amt: sourceRate } = source;
        const { Ccy: targetCurrency, Amt: targetRate } = target;
        return {
            source_currency: sourceCurreny,
            target_currency: targetCurrency,
            source_rate: sourceRate,
            target_rate: targetRate,
            exchange_date: date,
        };
    });
    const postingDate = (0, datetime_1.getDateWithoutTime)(date).toISOString();
    const defaultEurCurrency = {
        source_currency: "EUR",
        target_currency: "EUR",
        source_rate: "1",
        target_rate: "1",
        exchange_date: postingDate,
    };
    fxrates.push(defaultEurCurrency);
    const ratesToSave = {
        rates: JSON.stringify(fxrates),
        posting_date: postingDate,
    };
    await (0, mysql_adapter_1.withinTransaction)({
        app,
        callback: async () => {
            await (0, exchange_rate_repository_1.saveExchangeRates)(app, ratesToSave);
        },
    });
};
exports.populateDbWithExchangeRates = populateDbWithExchangeRates;
const populateDbWithCurrency = async (app) => {
    const response = await fetch(EXCHNAGE_RATE_URL, {
        headers: {
            "content-type": "application/x-www-form-urlencoded",
        },
        method: "POST",
        body: "tp=EU",
    });
    const xml = await response.text();
    const exchangeRatesJson = (await (0, xml_to_json_1.default)(xml));
    const currencies = exchangeRatesJson.FxRates.FxRate.map((rate) => {
        const [_, to] = rate.CcyAmt;
        const { Ccy: currency } = to;
        return {
            currency,
        };
    });
    const uniqueCurrencies = [...new Set(currencies)];
    uniqueCurrencies.push({ currency: "EUR" });
    await (0, currencies_repository_1.saveCurrencies)(app, uniqueCurrencies);
};
exports.populateDbWithCurrency = populateDbWithCurrency;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvc3JjL21hbmFnZXJzL3NlZWQtbWFuYWdlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSw2REFBOEQ7QUFDOUQsdUZBQTZFO0FBQzdFLGdEQUF1RDtBQUN2RCxpRkFBdUU7QUFDdkUsdUVBQTZDO0FBRzdDLE1BQU0saUJBQWlCLEdBQ3JCLHNFQUFzRSxDQUFDO0FBRXpFLE1BQU0seUJBQXlCLEdBQzdCLCtEQUErRCxDQUFDO0FBRTNELE1BQU0sMkJBQTJCLEdBQUcsS0FBSyxFQUM5QyxHQUFvQixFQUNwQixJQUFhLEVBQ2IsRUFBRTtJQUNGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ2pELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO0lBRWpFLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNoQyxPQUFPLEVBQUU7WUFDUCxjQUFjLEVBQUUsbUNBQW1DO1NBQ3BEO1FBQ0QsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJO0tBQ0wsQ0FBQyxDQUFDO0lBRUgsTUFBTSxHQUFHLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQU0sSUFBQSxxQkFBUyxFQUFDLEdBQUcsQ0FBQyxDQUFvQixDQUFDO0lBRXBFLE1BQU0sT0FBTyxHQUF1QixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FDdEUsQ0FBQyxJQUFVLEVBQUUsRUFBRTtRQUNiLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDckIsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDdkQsTUFBTSxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUV4RCxPQUFPO1lBQ0wsZUFBZSxFQUFFLGFBQWE7WUFDOUIsZUFBZSxFQUFFLGNBQWM7WUFDL0IsV0FBVyxFQUFFLFVBQVU7WUFDdkIsV0FBVyxFQUFFLFVBQVU7WUFDdkIsYUFBYSxFQUFFLElBQUk7U0FDcEIsQ0FBQztJQUNKLENBQUMsQ0FDRixDQUFDO0lBRUYsTUFBTSxXQUFXLEdBQUcsSUFBQSw2QkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUUzRCxNQUFNLGtCQUFrQixHQUFHO1FBQ3pCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLFdBQVcsRUFBRSxHQUFHO1FBQ2hCLFdBQVcsRUFBRSxHQUFHO1FBQ2hCLGFBQWEsRUFBRSxXQUFXO0tBQzNCLENBQUM7SUFFRixPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFakMsTUFBTSxXQUFXLEdBQUc7UUFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQzlCLFlBQVksRUFBRSxXQUFXO0tBQzFCLENBQUM7SUFFRixNQUFNLElBQUEsaUNBQWlCLEVBQUM7UUFDdEIsR0FBRztRQUNILFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNuQixNQUFNLElBQUEsNENBQWlCLEVBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzVDLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUExRFcsUUFBQSwyQkFBMkIsK0JBMER0QztBQUVLLE1BQU0sc0JBQXNCLEdBQUcsS0FBSyxFQUFFLEdBQW9CLEVBQUUsRUFBRTtJQUNuRSxNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtRQUM5QyxPQUFPLEVBQUU7WUFDUCxjQUFjLEVBQUUsbUNBQW1DO1NBQ3BEO1FBQ0QsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQztJQUNILE1BQU0sR0FBRyxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxNQUFNLElBQUEscUJBQVMsRUFBQyxHQUFHLENBQUMsQ0FBb0IsQ0FBQztJQUVwRSxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQVUsRUFBRSxFQUFFO1FBQ3JFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM1QixNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUU3QixPQUFPO1lBQ0wsUUFBUTtTQUNULENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDbEQsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFFM0MsTUFBTSxJQUFBLHNDQUFjLEVBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDOUMsQ0FBQyxDQUFDO0FBeEJXLFFBQUEsc0JBQXNCLDBCQXdCakMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvc3JjL21hbmFnZXJzL3NlZWQtbWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeS90eXBlcy9pbnN0YW5jZVwiO1xuaW1wb3J0IHsgd2l0aGluVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi4vYWRhcHRlcnMvbXlzcWwtYWRhcHRlclwiO1xuaW1wb3J0IHsgc2F2ZUV4Y2hhbmdlUmF0ZXMgfSBmcm9tIFwiLi4vcmVwb3NpdG9yaWVzL2V4Y2hhbmdlLXJhdGUtcmVwb3NpdG9yeVwiO1xuaW1wb3J0IHsgZ2V0RGF0ZVdpdGhvdXRUaW1lIH0gZnJvbSBcIi4uL3V0aWxzL2RhdGV0aW1lXCI7XG5pbXBvcnQgeyBzYXZlQ3VycmVuY2llcyB9IGZyb20gXCIuLi9yZXBvc2l0b3JpZXMvY3VycmVuY2llcy1yZXBvc2l0b3J5XCI7XG5pbXBvcnQgeG1sVG9Kc29uIGZyb20gXCIuLi91dGlscy94bWwtdG8tanNvblwiO1xuaW1wb3J0IHsgRXh0ZXJuYWxGeFJhdGVzLCBSYXRlLCBTdHVjdHVyZWRGeFJhdGVzIH0gZnJvbSBcIi4uL2VudGl0aWVzXCI7XG5cbmNvbnN0IEVYQ0hOQUdFX1JBVEVfVVJMID1cbiAgXCJodHRwczovL3d3dy5sYi5sdC93ZWJzZXJ2aWNlcy9GeFJhdGVzL0Z4UmF0ZXMuYXNteC9nZXRDdXJyZW50RnhSYXRlc1wiO1xuXG5jb25zdCBFWENITkFHRV9SQVRFX0JZX0RBVEVfVVJMID1cbiAgXCJodHRwczovL3d3dy5sYi5sdC93ZWJzZXJ2aWNlcy9GeFJhdGVzL0Z4UmF0ZXMuYXNteC9nZXRGeFJhdGVzXCI7XG5cbmV4cG9ydCBjb25zdCBwb3B1bGF0ZURiV2l0aEV4Y2hhbmdlUmF0ZXMgPSBhc3luYyAoXG4gIGFwcDogRmFzdGlmeUluc3RhbmNlLFxuICBkYXRlPzogc3RyaW5nXG4pID0+IHtcbiAgY29uc3QgYm9keSA9IGRhdGUgPyBgdHA9RVUmZHQ9JHtkYXRlfWAgOiBcInRwPUVVXCI7XG4gIGNvbnN0IHVybCA9IGRhdGUgPyBFWENITkFHRV9SQVRFX0JZX0RBVEVfVVJMIDogRVhDSE5BR0VfUkFURV9VUkw7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgIH0sXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5LFxuICB9KTtcblxuICBjb25zdCB4bWwgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gIGNvbnN0IGV4Y2hhbmdlUmF0ZXNKc29uID0gKGF3YWl0IHhtbFRvSnNvbih4bWwpKSBhcyBFeHRlcm5hbEZ4UmF0ZXM7XG5cbiAgY29uc3QgZnhyYXRlczogU3R1Y3R1cmVkRnhSYXRlc1tdID0gZXhjaGFuZ2VSYXRlc0pzb24uRnhSYXRlcy5GeFJhdGUubWFwKFxuICAgIChyYXRlOiBSYXRlKSA9PiB7XG4gICAgICBjb25zdCBkYXRlID0gcmF0ZS5EdDtcbiAgICAgIGNvbnN0IFtzb3VyY2UsIHRhcmdldF0gPSByYXRlLkNjeUFtdDtcbiAgICAgIGNvbnN0IHsgQ2N5OiBzb3VyY2VDdXJyZW55LCBBbXQ6IHNvdXJjZVJhdGUgfSA9IHNvdXJjZTtcbiAgICAgIGNvbnN0IHsgQ2N5OiB0YXJnZXRDdXJyZW5jeSwgQW10OiB0YXJnZXRSYXRlIH0gPSB0YXJnZXQ7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZV9jdXJyZW5jeTogc291cmNlQ3VycmVueSxcbiAgICAgICAgdGFyZ2V0X2N1cnJlbmN5OiB0YXJnZXRDdXJyZW5jeSxcbiAgICAgICAgc291cmNlX3JhdGU6IHNvdXJjZVJhdGUsXG4gICAgICAgIHRhcmdldF9yYXRlOiB0YXJnZXRSYXRlLFxuICAgICAgICBleGNoYW5nZV9kYXRlOiBkYXRlLFxuICAgICAgfTtcbiAgICB9XG4gICk7XG4gIFxuICBjb25zdCBwb3N0aW5nRGF0ZSA9IGdldERhdGVXaXRob3V0VGltZShkYXRlKS50b0lTT1N0cmluZygpO1xuXG4gIGNvbnN0IGRlZmF1bHRFdXJDdXJyZW5jeSA9IHtcbiAgICBzb3VyY2VfY3VycmVuY3k6IFwiRVVSXCIsXG4gICAgdGFyZ2V0X2N1cnJlbmN5OiBcIkVVUlwiLFxuICAgIHNvdXJjZV9yYXRlOiBcIjFcIixcbiAgICB0YXJnZXRfcmF0ZTogXCIxXCIsXG4gICAgZXhjaGFuZ2VfZGF0ZTogcG9zdGluZ0RhdGUsXG4gIH07XG5cbiAgZnhyYXRlcy5wdXNoKGRlZmF1bHRFdXJDdXJyZW5jeSk7XG5cbiAgY29uc3QgcmF0ZXNUb1NhdmUgPSB7XG4gICAgcmF0ZXM6IEpTT04uc3RyaW5naWZ5KGZ4cmF0ZXMpLFxuICAgIHBvc3RpbmdfZGF0ZTogcG9zdGluZ0RhdGUsXG4gIH07XG5cbiAgYXdhaXQgd2l0aGluVHJhbnNhY3Rpb24oe1xuICAgIGFwcCxcbiAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgc2F2ZUV4Y2hhbmdlUmF0ZXMoYXBwLCByYXRlc1RvU2F2ZSk7XG4gICAgfSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgcG9wdWxhdGVEYldpdGhDdXJyZW5jeSA9IGFzeW5jIChhcHA6IEZhc3RpZnlJbnN0YW5jZSkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKEVYQ0hOQUdFX1JBVEVfVVJMLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICB9LFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogXCJ0cD1FVVwiLFxuICB9KTtcbiAgY29uc3QgeG1sID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICBjb25zdCBleGNoYW5nZVJhdGVzSnNvbiA9IChhd2FpdCB4bWxUb0pzb24oeG1sKSkgYXMgRXh0ZXJuYWxGeFJhdGVzO1xuXG4gIGNvbnN0IGN1cnJlbmNpZXMgPSBleGNoYW5nZVJhdGVzSnNvbi5GeFJhdGVzLkZ4UmF0ZS5tYXAoKHJhdGU6IFJhdGUpID0+IHtcbiAgICBjb25zdCBbXywgdG9dID0gcmF0ZS5DY3lBbXQ7XG4gICAgY29uc3QgeyBDY3k6IGN1cnJlbmN5IH0gPSB0bztcblxuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW5jeSxcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCB1bmlxdWVDdXJyZW5jaWVzID0gWy4uLm5ldyBTZXQoY3VycmVuY2llcyldO1xuICB1bmlxdWVDdXJyZW5jaWVzLnB1c2goeyBjdXJyZW5jeTogXCJFVVJcIiB9KTtcblxuICBhd2FpdCBzYXZlQ3VycmVuY2llcyhhcHAsIHVuaXF1ZUN1cnJlbmNpZXMpO1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==