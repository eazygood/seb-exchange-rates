d3019da7f6da39dfc5e6cbd7359fd161
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../../src/plugins/knex-plugin", () => {
    return knexPlugin;
});
const helper_1 = require("../../../helper");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
let app;
let knex = (0, helper_1.getDefaultKnexPluginParams)();
const knexPlugin = (0, fastify_plugin_1.default)(async (fastify, options) => {
    fastify.decorate("knex", knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe("GET /public/exchange-rates/currencies", () => {
    it("should get currency list", async () => {
        knex.table = () => ({
            select: () => [
                { currency: "EUR" },
                { currency: "USD" },
                { currency: "JPY" },
            ],
        });
        const exchageRates = await app.inject({
            method: "GET",
            url: "/public/exchange-rates/currencies",
        });
        expect(exchageRates.statusCode).toBe(200);
        expect(JSON.parse(exchageRates.body)).toEqual({ data: ["EUR", "USD", "JPY"] });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQWVBLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBaEJILDRDQUl5QjtBQUN6QixvRUFBZ0M7QUFFaEMsSUFBSSxHQUFvQixDQUFDO0FBQ3pCLElBQUksSUFBSSxHQUFHLElBQUEsbUNBQTBCLEdBQUUsQ0FBQztBQUV4QyxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFFLEVBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFZLEVBQUUsRUFBRTtJQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUMsQ0FBQztBQU1ILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQixHQUFHLEdBQUcsTUFBTSxJQUFBLHFCQUFZLEdBQUUsQ0FBQztBQUM3QixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7SUFDckQsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNsQixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ1osRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO2dCQUNuQixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7Z0JBQ25CLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTthQUNwQjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUNwQyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSxtQ0FBbUM7U0FDekMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakYsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy90ZXN0L3VuaXQvcm91dGVzL3B1YmxpYy9nZXQtZXhjaGFuZ2UtcmF0ZXMtY3VycmVuY2llcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZhc3RpZnksIHR5cGUgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSBcImZhc3RpZnlcIjtcbmltcG9ydCB7XG4gIGdldERlZmF1bHRLbmV4UGx1Z2luUGFyYW1zLFxuICBzdGFydFRlc3RFbnYsXG4gIHN0b3BUZXN0RW52LFxufSBmcm9tIFwiLi4vLi4vLi4vaGVscGVyXCI7XG5pbXBvcnQgZnAgZnJvbSBcImZhc3RpZnktcGx1Z2luXCI7XG5cbmxldCBhcHA6IEZhc3RpZnlJbnN0YW5jZTtcbmxldCBrbmV4ID0gZ2V0RGVmYXVsdEtuZXhQbHVnaW5QYXJhbXMoKTtcblxuY29uc3Qga25leFBsdWdpbiA9IGZwKGFzeW5jIChmYXN0aWZ5OiBhbnksIG9wdGlvbnM6IGFueSkgPT4ge1xuICBmYXN0aWZ5LmRlY29yYXRlKFwia25leFwiLCBrbmV4KTtcbn0pO1xuXG5qZXN0Lm1vY2soXCIuLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9rbmV4LXBsdWdpblwiLCAoKSA9PiB7XG4gIHJldHVybiBrbmV4UGx1Z2luO1xufSk7XG5cbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gIGFwcCA9IGF3YWl0IHN0YXJ0VGVzdEVudigpO1xufSk7XG5cbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHN0b3BUZXN0RW52KCk7XG59KTtcblxuZGVzY3JpYmUoXCJHRVQgL3B1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzXCIsICgpID0+IHtcbiAgaXQoXCJzaG91bGQgZ2V0IGN1cnJlbmN5IGxpc3RcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGtuZXgudGFibGUgPSAoKSA9PiAoe1xuICAgICAgc2VsZWN0OiAoKSA9PiBbXG4gICAgICAgIHsgY3VycmVuY3k6IFwiRVVSXCIgfSxcbiAgICAgICAgeyBjdXJyZW5jeTogXCJVU0RcIiB9LFxuICAgICAgICB7IGN1cnJlbmN5OiBcIkpQWVwiIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXhjaGFnZVJhdGVzID0gYXdhaXQgYXBwLmluamVjdCh7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICB1cmw6IFwiL3B1YmxpYy9leGNoYW5nZS1yYXRlcy9jdXJyZW5jaWVzXCIsXG4gICAgfSk7XG5cbiAgICBleHBlY3QoZXhjaGFnZVJhdGVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcbiAgICBleHBlY3QoSlNPTi5wYXJzZShleGNoYWdlUmF0ZXMuYm9keSkpLnRvRXF1YWwoeyBkYXRhOiBbXCJFVVJcIiwgXCJVU0RcIiwgXCJKUFlcIl0gfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=