{"file":"/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/unit/routes/public/get-exchange-rates-by-currency.test.ts","mappings":"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","names":[],"sources":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/unit/routes/public/get-exchange-rates-by-currency.test.ts"],"sourcesContent":["import { FastifyInstance } from \"fastify\";\nimport {\n    getDefaultKnexPluginParams,\n    startTestEnv,\n    stopTestEnv,\n} from \"../../../helper\";\nimport fp from \"fastify-plugin\";\n\nlet app: FastifyInstance;\nlet knex = getDefaultKnexPluginParams();\n\nconst knexPlugin = fp(async (fastify: any, options: any) => {\n    fastify.decorate(\"knex\", knex);\n});\n\njest.mock(\"../../../../src/plugins/knex-plugin\", () => {\n    return knexPlugin;\n});\n\nbeforeAll(async () => {\n    app = await startTestEnv();\n});\n\nbeforeEach(async () => {\n    jest.resetAllMocks();\n});\n\nafterAll(async () => {\n    await stopTestEnv();\n});\n\ndescribe('endpoints /public/exchange-rates calls', () => {\n    describe(\"GET /public/exchange-rates/\", () => {\n        it(\"should response with exchange rates data\", async () => {\n            const data = [\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"117.201880\",\n                    exchange_date: \"2023-01-22\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"116.201880\",\n                    exchange_date: \"2023-01-21\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"115.201880\",\n                    exchange_date: \"2023-01-20\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"JPY\",\n                    source_rate: \"1\",\n                    target_rate: \"120\",\n                    exchange_date: \"2023-01-20\",\n                },\n            ];\n    \n            knex.table = () => ({\n                select: () => {\n                    return [{ rates: JSON.stringify(data), posting_date: \"2024-01-20\" }];\n                },\n            });\n    \n            const exchangeRates = await app.inject({\n                method: \"GET\",\n                url: \"/public/exchange-rates\",\n            });\n    \n            expect(exchangeRates.statusCode).toBe(200);\n            expect(JSON.parse(exchangeRates.body)).toEqual({\n                data: {\n                    RSD: [\n                        { date: \"2023-01-22\", source_rate: \"1\", target_rate: \"117.201880\" },\n                        { date: \"2023-01-21\", source_rate: \"1\", target_rate: \"116.201880\" },\n                        { date: \"2023-01-20\", source_rate: \"1\", target_rate: \"115.201880\" },\n                    ],\n                },\n            });\n        });\n    });\n\n    describe(\"GET /public/exchange-rates/:currency\", () => {\n        it(\"should return 404 not found\", async () => {\n            const exchangeRates = await app.inject({\n                method: \"GET\",\n                url: \"/public/exchange-rates/\",\n            });\n    \n            expect(exchangeRates.statusCode).toEqual(404);\n        });\n        it(\"should response exchange rates by currency\", async () => {\n            const data = [\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"117.201880\",\n                    exchange_date: \"2023-01-22\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"116.201880\",\n                    exchange_date: \"2023-01-21\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"115.201880\",\n                    exchange_date: \"2023-01-20\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"JPY\",\n                    source_rate: \"1\",\n                    target_rate: \"120\",\n                    exchange_date: \"2023-01-20\",\n                },\n            ];\n    \n            knex.table = () => ({\n                select: () => {\n                    return [{ rates: JSON.stringify(data), posting_date: \"2024-01-20\" }];\n                },\n            });\n    \n            const exchangeRates = await app.inject({\n                method: \"GET\",\n                url: \"/public/exchange-rates/RSD\",\n            });\n    \n            expect(exchangeRates.statusCode).toBe(200);\n            expect(JSON.parse(exchangeRates.body)).toEqual({\n                data: {\n                    RSD: [\n                        { date: \"2023-01-22\", source_rate: \"1\", target_rate: \"117.201880\" },\n                        { date: \"2023-01-21\", source_rate: \"1\", target_rate: \"116.201880\" },\n                        { date: \"2023-01-20\", source_rate: \"1\", target_rate: \"115.201880\" },\n                    ],\n                },\n            });\n        });\n    });\n})\n"],"version":3}