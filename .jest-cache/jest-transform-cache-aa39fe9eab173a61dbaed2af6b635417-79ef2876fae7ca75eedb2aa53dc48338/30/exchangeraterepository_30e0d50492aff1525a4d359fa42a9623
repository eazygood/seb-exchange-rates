d0ac030bb9de1ca2b3d138944f303550
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFxRatesLatest = exports.getFxRates = exports.saveExchangeRates = void 0;
const constants_1 = require("../constants");
const datetime_1 = require("../utils/datetime");
const saveExchangeRates = async (app, exchangeRates) => {
    await app.knex
        .table(constants_1.DB_EXCHANGE_RATE_TABLE)
        .insert(exchangeRates)
        .onConflict('posting_date')
        .ignore();
};
exports.saveExchangeRates = saveExchangeRates;
const getFxRates = async (app, latest) => {
    if (latest) {
        return await app.knex.table(constants_1.DB_EXCHANGE_RATE_TABLE).select().where({ posting_date: (0, datetime_1.getDateWithoutTime)().toISOString() }).first();
    }
    return await app.knex.table(constants_1.DB_EXCHANGE_RATE_TABLE).select();
};
exports.getFxRates = getFxRates;
const getFxRatesLatest = async (app) => {
    return await app.knex.table(constants_1.DB_EXCHANGE_RATE_TABLE).select().where({ posting_date: (0, datetime_1.getDateWithoutTime)().toISOString() }).first();
};
exports.getFxRatesLatest = getFxRatesLatest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvc3JjL3JlcG9zaXRvcmllcy9leGNoYW5nZS1yYXRlLXJlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7O0FBRUEsNENBQXNEO0FBQ3RELGdEQUF1RDtBQUVoRCxNQUFNLGlCQUFpQixHQUFHLEtBQUssRUFBRSxHQUFvQixFQUFFLGFBQXdCLEVBQUUsRUFBRTtJQUN4RixNQUFNLEdBQUcsQ0FBQyxJQUFJO1NBQ1gsS0FBSyxDQUFDLGtDQUFzQixDQUFDO1NBQzdCLE1BQU0sQ0FBQyxhQUFhLENBQUM7U0FDckIsVUFBVSxDQUFDLGNBQWMsQ0FBQztTQUMxQixNQUFNLEVBQUUsQ0FBQztBQUNkLENBQUMsQ0FBQztBQU5XLFFBQUEsaUJBQWlCLHFCQU01QjtBQUVLLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxHQUFvQixFQUFFLE1BQWdCLEVBQXdCLEVBQUU7SUFDL0YsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLE9BQU8sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQ0FBc0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxJQUFBLDZCQUFrQixHQUFFLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2xJLENBQUM7SUFFRCxPQUFPLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0NBQXNCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMvRCxDQUFDLENBQUM7QUFOVyxRQUFBLFVBQVUsY0FNckI7QUFFSyxNQUFNLGdCQUFnQixHQUFHLEtBQUssRUFBRSxHQUFvQixFQUFzQixFQUFFO0lBQ2pGLE9BQU8sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQ0FBc0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxJQUFBLDZCQUFrQixHQUFFLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xJLENBQUMsQ0FBQztBQUZXLFFBQUEsZ0JBQWdCLG9CQUUzQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy9zcmMvcmVwb3NpdG9yaWVzL2V4Y2hhbmdlLXJhdGUtcmVwb3NpdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeVwiO1xuaW1wb3J0IHsgRnhSYXRlc0RiIH0gZnJvbSBcIi4uL2VudGl0aWVzXCI7XG5pbXBvcnQgeyBEQl9FWENIQU5HRV9SQVRFX1RBQkxFIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZ2V0RGF0ZVdpdGhvdXRUaW1lIH0gZnJvbSBcIi4uL3V0aWxzL2RhdGV0aW1lXCI7XG5cbmV4cG9ydCBjb25zdCBzYXZlRXhjaGFuZ2VSYXRlcyA9IGFzeW5jIChhcHA6IEZhc3RpZnlJbnN0YW5jZSwgZXhjaGFuZ2VSYXRlczogRnhSYXRlc0RiKSA9PiB7XG4gIGF3YWl0IGFwcC5rbmV4XG4gICAgLnRhYmxlKERCX0VYQ0hBTkdFX1JBVEVfVEFCTEUpXG4gICAgLmluc2VydChleGNoYW5nZVJhdGVzKVxuICAgIC5vbkNvbmZsaWN0KCdwb3N0aW5nX2RhdGUnKVxuICAgIC5pZ25vcmUoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRGeFJhdGVzID0gYXN5bmMgKGFwcDogRmFzdGlmeUluc3RhbmNlLCBsYXRlc3Q/OiBib29sZWFuKTogUHJvbWlzZTxGeFJhdGVzRGJbXT4gPT4ge1xuICBpZiAobGF0ZXN0KSB7XG4gICAgcmV0dXJuIGF3YWl0IGFwcC5rbmV4LnRhYmxlKERCX0VYQ0hBTkdFX1JBVEVfVEFCTEUpLnNlbGVjdCgpLndoZXJlKHsgcG9zdGluZ19kYXRlOiBnZXREYXRlV2l0aG91dFRpbWUoKS50b0lTT1N0cmluZygpfSkuZmlyc3QoKTsgIFxuICB9XG5cbiAgcmV0dXJuIGF3YWl0IGFwcC5rbmV4LnRhYmxlKERCX0VYQ0hBTkdFX1JBVEVfVEFCTEUpLnNlbGVjdCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEZ4UmF0ZXNMYXRlc3QgPSBhc3luYyAoYXBwOiBGYXN0aWZ5SW5zdGFuY2UpOiBQcm9taXNlPEZ4UmF0ZXNEYj4gPT4ge1xuICByZXR1cm4gYXdhaXQgYXBwLmtuZXgudGFibGUoREJfRVhDSEFOR0VfUkFURV9UQUJMRSkuc2VsZWN0KCkud2hlcmUoeyBwb3N0aW5nX2RhdGU6IGdldERhdGVXaXRob3V0VGltZSgpLnRvSVNPU3RyaW5nKCl9KS5maXJzdCgpO1xufTtcblxuIl0sInZlcnNpb24iOjN9