2fae38c94d077eb058598cabb0d91627
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../../../src/plugins/knex-plugin', (() => {
    return knexPlugin;
}));
const helper_1 = require("../../../helper");
let app;
const fp = require('fastify-plugin');
const knexPlugin = fp(async (fastify, options) => {
    console.log(options);
    const knex = {
        // raw: jest.fn(),
        // destroy: jest.fn(),
        // migrate: {
        //     latest: jest.fn(),
        // },
        table: () => ({
            select: () => {
                return [{}];
            },
        })
    };
    fastify.decorate('knex', knex);
});
beforeAll(async () => {
    app = await (0, helper_1.startTestEnv)();
});
beforeEach(async () => {
    jest.resetAllMocks();
});
afterAll(async () => {
    await (0, helper_1.stopTestEnv)();
});
describe('GET public/exchange-rates/currencies', () => {
    it.only('should get currency list', async () => {
        const exchageRates = await app.inject({
            method: 'GET',
            url: '/public/exchange-rates/currencies',
        });
        console.log(exchageRates.statusCode);
        console.log(exchageRates.body);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC91bml0L3JvdXRlcy9wdWJsaWMvZ2V0LWV4Y2hhbmdlLXJhdGVzLWN1cnJlbmNpZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQXdCQSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQ3JELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUF6QkosNENBQTREO0FBRTVELElBQUksR0FBb0IsQ0FBQztBQUV6QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNyQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQVksRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHO1FBQ1Qsa0JBQWtCO1FBQ2xCLHNCQUFzQjtRQUN0QixhQUFhO1FBQ2IseUJBQXlCO1FBQ3pCLEtBQUs7UUFDTCxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNWLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ2YsQ0FBQztTQUNKLENBQUM7S0FDTCxDQUFBO0lBRUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUE7QUFNRixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDakIsR0FBRyxHQUFHLE1BQU0sSUFBQSxxQkFBWSxHQUFFLENBQUM7QUFFL0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFBO0FBRUYsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2hCLE1BQU0sSUFBQSxvQkFBVyxHQUFFLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUE7QUFFRixRQUFRLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ2xELEVBQUUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ2xDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLG1DQUFtQztTQUMzQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuQyxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raW1uYWNpc2Npb25pcy9naXQvcGVyc29uYWwvc2ViLWV4Y2hhbmdlLXJhdGVzL3Rlc3QvdW5pdC9yb3V0ZXMvcHVibGljL2dldC1leGNoYW5nZS1yYXRlcy1jdXJyZW5jaWVzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tIFwiZmFzdGlmeVwiO1xuaW1wb3J0IHsgc3RhcnRUZXN0RW52LCBzdG9wVGVzdEVudiB9IGZyb20gXCIuLi8uLi8uLi9oZWxwZXJcIjtcblxubGV0IGFwcDogRmFzdGlmeUluc3RhbmNlO1xuXG5jb25zdCBmcCA9IHJlcXVpcmUoJ2Zhc3RpZnktcGx1Z2luJyk7XG5jb25zdCBrbmV4UGx1Z2luID0gZnAoYXN5bmMgKGZhc3RpZnk6IGFueSwgb3B0aW9uczphbnkpID0+IHtcbiAgICBjb25zb2xlLmxvZyhvcHRpb25zKTtcbiAgICBjb25zdCBrbmV4ID0geyBcbiAgICAgICAgLy8gcmF3OiBqZXN0LmZuKCksXG4gICAgICAgIC8vIGRlc3Ryb3k6IGplc3QuZm4oKSxcbiAgICAgICAgLy8gbWlncmF0ZToge1xuICAgICAgICAvLyAgICAgbGF0ZXN0OiBqZXN0LmZuKCksXG4gICAgICAgIC8vIH0sXG4gICAgICAgIHRhYmxlOiAoKSA9PiAoe1xuICAgICAgICAgICAgc2VsZWN0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt7fV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZmFzdGlmeS5kZWNvcmF0ZSgna25leCcsIGtuZXgpO1xufSlcblxuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9rbmV4LXBsdWdpbicsICgoKSA9PiB7XG4gIHJldHVybiBrbmV4UGx1Z2luO1xufSkpO1xuXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGFwcCA9IGF3YWl0IHN0YXJ0VGVzdEVudigpO1xuXG59KTtcblxuYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgamVzdC5yZXNldEFsbE1vY2tzKCk7XG59KVxuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgc3RvcFRlc3RFbnYoKTtcbn0pXG5cbmRlc2NyaWJlKCdHRVQgcHVibGljL2V4Y2hhbmdlLXJhdGVzL2N1cnJlbmNpZXMnLCAoKSA9PiB7XG4gICAgaXQub25seSgnc2hvdWxkIGdldCBjdXJyZW5jeSBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBleGNoYWdlUmF0ZXMgPSBhd2FpdCBhcHAuaW5qZWN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvcHVibGljL2V4Y2hhbmdlLXJhdGVzL2N1cnJlbmNpZXMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhleGNoYWdlUmF0ZXMuc3RhdHVzQ29kZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGV4Y2hhZ2VSYXRlcy5ib2R5KTtcblxuICAgIH0pXG59KVxuIl0sInZlcnNpb24iOjN9