{"file":"/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts","mappings":";;;;;;AACA,gDAAwB;AAGxB,SAAgB,SAAS;IACvB,OAAO;QACL,MAAM,EAAE,QAAQ;QAChB,UAAU,EAAE;YACV,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,IAAI;SACf;KACF,CAAA;AACH,CAAC;AAVD,8BAUC;AAEM,KAAK,UAAU,qBAAqB,CACzC,GAAoB;IAEpB,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAE/B,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC9B,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC5B,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC;KACjD,CAAC,CAAC;IACH,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAC/B,CAAC;AAXD,sDAWC;AAEM,KAAK,UAAU,iBAAiB,CAAI,EACzC,GAAG,EACH,QAAQ,GAIT;IACC,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IAEzC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEjC,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;QAEnB,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,MAAM,GAAG,CAAC,QAAQ,EAAE,CAAC;QAErB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;AACH,CAAC;AApBD,8CAoBC","names":[],"sources":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts"],"sourcesContent":["import { FastifyInstance } from \"fastify\";\nimport path from \"path\";\nimport { Knex } from \"knex\";\n\nexport function getConfig() {\n  return {\n    client: \"mysql2\",\n    connection: {\n      host: \"mysql\",\n      user: \"user\",\n      password: \"password\",\n      database: \"db\",\n    },\n  }\n}\n\nexport async function registerMysqlDatabase(\n  app: FastifyInstance\n): Promise<void> {\n  await app.knex.raw(\"SELECT 1\");\n\n  console.log(\"init migration\");\n  await app.knex.migrate.latest({\n    database: \"db\",\n    directory: path.join(__dirname, \"../migrations\"),\n  });\n  console.log(\"migratin done\");\n}\n\nexport async function withinTransaction<T>({\n  app,\n  callback,\n}: {\n  app: FastifyInstance;\n  callback: (trx: Knex.Transaction) => Promise<T>;\n}): Promise<T> {\n  const trx = await app.knex.transaction();\n\n  try {\n    const data = await callback(trx);\n\n    await trx.commit();\n\n    return data;\n  } catch (err) {\n    await trx.rollback();\n\n    throw new Error(\"database commit failed\");\n  }\n}\n"],"version":3}