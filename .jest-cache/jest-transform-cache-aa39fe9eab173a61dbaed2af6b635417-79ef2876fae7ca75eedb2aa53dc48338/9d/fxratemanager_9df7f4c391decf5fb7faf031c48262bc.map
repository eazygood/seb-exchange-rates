{"file":"/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/fxrate-manager.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAuB;AAEvB,8DAAgD;AAQzC,MAAM,UAAU,GAAG,KAAK,EAC7B,GAAoB,EACpB,MAAgB,EACW,EAAE;IAC7B,MAAM,OAAO,GAAgB,MAAM,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACxE,MAAM,KAAK,GAAuB,OAAO;SACtC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACrC,IAAI,EAAE,CAAC;IAEV,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC;AAVW,QAAA,UAAU,cAUrB;AAEK,MAAM,oBAAoB,GAAG,KAAK,EACvC,GAAoB,EACpB,QAAgB,EACW,EAAE;IAC7B,MAAM,OAAO,GAAgB,MAAM,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAChE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAEpB,MAAM,KAAK,GAAuB,OAAO;SACtC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACrC,IAAI,EAAE;SACN,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC;IAEvD,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC;AAbW,QAAA,oBAAoB,wBAa/B;AAEF,SAAS,aAAa,CAAC,IAAwB;IAC7C,oCAAoC;IACpC,MAAM,WAAW,GAAG,gBAAC,CAAC,OAAO,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;IAEvD,qDAAqD;IACrD,MAAM,eAAe,GACnB,gBAAC,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;QACjC,2CAA2C;QAC3C,MAAM,WAAW,GAAG,gBAAC,CAAC,MAAM,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QAErD,8CAA8C;QAC9C,OAAO,gBAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACnC,IAAI,EAAE,IAAI,CAAC,aAAa;YACxB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IAEL,OAAO,eAAe,CAAC;AACzB,CAAC","names":[],"sources":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/fxrate-manager.ts"],"sourcesContent":["import _ from \"lodash\";\nimport { FastifyInstance } from \"fastify\";\nimport * as repositories from \"../repositories\";\nimport {\n  FxRateByDateData,\n  FxRatesDb,\n  SourceTargetFxRateData,\n  StucturedFxRates,\n} from \"../entities\";\n\nexport const getFxRates = async (\n  app: FastifyInstance,\n  latest?: boolean,\n): Promise<FxRateByDateData> => {\n  const fxRates: FxRatesDb[] = await repositories.getFxRates(app, latest);\n  const rates: StucturedFxRates[] = fxRates\n    .map((rate) => JSON.parse(rate.rates))\n    .flat();\n\n  return transformData(rates);\n};\n\nexport const getFxRatesByCurrency = async (\n  app: FastifyInstance,\n  currency: string\n): Promise<FxRateByDateData> => {\n  const fxRates: FxRatesDb[] = await repositories.getFxRates(app);\n  console.log(fxRates)\n\n  const rates: StucturedFxRates[] = fxRates\n    .map((rate) => JSON.parse(rate.rates))\n    .flat()\n    .filter((rate) => rate.target_currency === currency);\n\n  return transformData(rates);\n};\n\nfunction transformData(data: StucturedFxRates[]): FxRateByDateData {\n  // Group the data by target_currency\n  const groupedData = _.groupBy(data, \"target_currency\");\n\n  // Map over the grouped data and transform each group\n  const transformedData: { [currency: string]: SourceTargetFxRateData[] } =\n    _.mapValues(groupedData, (group) => {\n      // Remove duplicates based on exchange_date\n      const uniqueGroup = _.uniqBy(group, \"exchange_date\");\n\n      // Transform the group into the desired format\n      return _.map(uniqueGroup, (item) => ({\n        date: item.exchange_date,\n        source_rate: item.source_rate,\n        target_rate: item.target_rate,\n      }));\n    });\n\n  return transformedData;\n}\n"],"version":3}