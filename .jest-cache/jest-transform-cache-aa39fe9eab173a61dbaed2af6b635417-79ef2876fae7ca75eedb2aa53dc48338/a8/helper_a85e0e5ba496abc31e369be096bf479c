0d24701d0feb5173652f5c586f588286
"use strict";
// import Fastify from "fastify";
// import fp from "fastify-plugin";
// import App from "../src/app";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopTestEnv = exports.startTestEnv = void 0;
// import app from '../src/app';
// const mockKnex = async (fastify: any) => {
//   fastify.knex = jest.fn().mockReturnThis();
//   fastify.transacting = jest.fn().mockReturnThis();
//   fastify.update = jest.fn().mockReturnThis();
//   fastify.insert = jest.fn().mockReturnThis();
//   fastify.select = jest.fn().mockReturnThis()
//   fastify.from = jest.fn().mockReturnThis();
//   fastify.where = jest.fn().mockReturnThis();
//   fastify.knex.transaction = 
//   jest.fn(async function mockTransaction(cb) {
//       return cb(trx);
//   });
// };
// const trx = {
//   commit: jest.fn(function(data) {
//       return data;
//   }),
//   rollback: jest.fn(),
// };
let app;
async function startTestEnv() {
    const fastify = require('../src/app').default;
    const knexPluginMock = jest.fn();
    app = fastify.register(knexPluginMock, {});
    await app.ready();
    return app;
}
exports.startTestEnv = startTestEnv;
async function stopTestEnv() {
    await app?.close();
}
exports.stopTestEnv = stopTestEnv;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpbW5hY2lzY2lvbmlzL2dpdC9wZXJzb25hbC9zZWItZXhjaGFuZ2UtcmF0ZXMvdGVzdC9oZWxwZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLGlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsZ0NBQWdDOzs7QUFnQmhDLGdDQUFnQztBQUVoQyw2Q0FBNkM7QUFDN0MsK0NBQStDO0FBQy9DLHNEQUFzRDtBQUN0RCxpREFBaUQ7QUFDakQsaURBQWlEO0FBQ2pELGdEQUFnRDtBQUNoRCwrQ0FBK0M7QUFDL0MsZ0RBQWdEO0FBQ2hELGdDQUFnQztBQUNoQyxpREFBaUQ7QUFDakQsd0JBQXdCO0FBQ3hCLFFBQVE7QUFDUixLQUFLO0FBQ0wsZ0JBQWdCO0FBQ2hCLHFDQUFxQztBQUNyQyxxQkFBcUI7QUFDckIsUUFBUTtBQUNSLHlCQUF5QjtBQUN6QixLQUFLO0FBRUwsSUFBSSxHQUFvQixDQUFDO0FBRWxCLEtBQUssVUFBVSxZQUFZO0lBQ2pDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFFN0MsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBRWpDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUV0QyxDQUFDLENBQUE7SUFFSCxNQUFNLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVsQixPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFaRCxvQ0FZQztBQUVNLEtBQUssVUFBVSxXQUFXO0lBQzdCLE1BQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ3ZCLENBQUM7QUFGRCxrQ0FFQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2ltbmFjaXNjaW9uaXMvZ2l0L3BlcnNvbmFsL3NlYi1leGNoYW5nZS1yYXRlcy90ZXN0L2hlbHBlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgRmFzdGlmeSBmcm9tIFwiZmFzdGlmeVwiO1xuLy8gaW1wb3J0IGZwIGZyb20gXCJmYXN0aWZ5LXBsdWdpblwiO1xuLy8gaW1wb3J0IEFwcCBmcm9tIFwiLi4vc3JjL2FwcFwiO1xuXG4vLyBleHBvcnQgZnVuY3Rpb24gYnVpbGQoKSB7XG4vLyAgIGNvbnN0IGFwcCA9IEZhc3RpZnkoKTtcblxuLy8gICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuLy8gICAgIHZvaWQgYXBwLnJlZ2lzdGVyKGZwKEFwcCkpO1xuLy8gICAgIGF3YWl0IGFwcC5yZWFkeSgpO1xuLy8gICB9KTtcblxuLy8gICBhZnRlckFsbChhc3luYyAoKSA9PiBhd2FpdCBhcHAuY2xvc2UoKSk7XG5cbi8vICAgcmV0dXJuIGFwcDtcbi8vIH1cbmltcG9ydCB7IEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gJ2Zhc3RpZnknO1xuaW1wb3J0IGtuZXhQbHVnaW4gZnJvbSAnLi4vc3JjL3BsdWdpbnMva25leC1wbHVnaW4nO1xuLy8gaW1wb3J0IGFwcCBmcm9tICcuLi9zcmMvYXBwJztcblxuLy8gY29uc3QgbW9ja0tuZXggPSBhc3luYyAoZmFzdGlmeTogYW55KSA9PiB7XG4vLyAgIGZhc3RpZnkua25leCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpO1xuLy8gICBmYXN0aWZ5LnRyYW5zYWN0aW5nID0gamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCk7XG4vLyAgIGZhc3RpZnkudXBkYXRlID0gamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCk7XG4vLyAgIGZhc3RpZnkuaW5zZXJ0ID0gamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCk7XG4vLyAgIGZhc3RpZnkuc2VsZWN0ID0gamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKClcbi8vICAgZmFzdGlmeS5mcm9tID0gamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCk7XG4vLyAgIGZhc3RpZnkud2hlcmUgPSBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKTtcbi8vICAgZmFzdGlmeS5rbmV4LnRyYW5zYWN0aW9uID0gXG4vLyAgIGplc3QuZm4oYXN5bmMgZnVuY3Rpb24gbW9ja1RyYW5zYWN0aW9uKGNiKSB7XG4vLyAgICAgICByZXR1cm4gY2IodHJ4KTtcbi8vICAgfSk7XG4vLyB9O1xuLy8gY29uc3QgdHJ4ID0ge1xuLy8gICBjb21taXQ6IGplc3QuZm4oZnVuY3Rpb24oZGF0YSkge1xuLy8gICAgICAgcmV0dXJuIGRhdGE7XG4vLyAgIH0pLFxuLy8gICByb2xsYmFjazogamVzdC5mbigpLFxuLy8gfTtcblxubGV0IGFwcDogRmFzdGlmeUluc3RhbmNlO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRUZXN0RW52KCk6IFByb21pc2U8RmFzdGlmeUluc3RhbmNlPiB7XG5cdGNvbnN0IGZhc3RpZnkgPSByZXF1aXJlKCcuLi9zcmMvYXBwJykuZGVmYXVsdDtcblxuICBjb25zdCBrbmV4UGx1Z2luTW9jayA9IGplc3QuZm4oKTtcblxuICBhcHAgPSBmYXN0aWZ5LnJlZ2lzdGVyKGtuZXhQbHVnaW5Nb2NrLCB7XG4gICAgXG4gIH0pXG5cblx0YXdhaXQgYXBwLnJlYWR5KCk7XG5cblx0cmV0dXJuIGFwcDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3BUZXN0RW52KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGFwcD8uY2xvc2UoKTtcbn1cblxuIl0sInZlcnNpb24iOjN9