[["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/jest.setup.ts",{"fileContent":"beforeEach(() => {\n\tjest.resetModules();\n\tjest.clearAllMocks();\n});","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/unit/routes/public/get-exchange-rates-currencies.test.ts",{"fileContent":"import { fastify, type FastifyInstance } from \"fastify\";\nimport {\n  getDefaultKnexPluginParams,\n  startTestEnv,\n  stopTestEnv,\n} from \"../../../helper\";\nimport fp from \"fastify-plugin\";\n\nlet app: FastifyInstance;\nlet knex = getDefaultKnexPluginParams();\n\nconst knexPlugin = fp(async (fastify: any, options: any) => {\n  fastify.decorate(\"knex\", knex);\n});\n\njest.mock(\"../../../../src/plugins/knex-plugin\", () => {\n  return knexPlugin;\n});\n\nbeforeAll(async () => {\n  app = await startTestEnv();\n});\n\nbeforeEach(async () => {\n  jest.resetAllMocks();\n});\n\nafterAll(async () => {\n  await stopTestEnv();\n});\n\ndescribe(\"GET /public/exchange-rates/currencies\", () => {\n  it(\"should get currency list\", async () => {\n    knex.table = () => ({\n      select: () => [\n        { currency: \"EUR\" },\n        { currency: \"USD\" },\n        { currency: \"JPY\" },\n      ],\n    });\n\n    const exchageRates = await app.inject({\n      method: \"GET\",\n      url: \"/public/exchange-rates/currencies\",\n    });\n\n    expect(exchageRates.statusCode).toBe(200);\n    expect(JSON.parse(exchageRates.body)).toEqual({ data: [\"EUR\", \"USD\", \"JPY\"] });\n  });\n});\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/helper.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/plugins/knex-plugin.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/app.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/unit/app.test.ts",{"fileContent":"import type { FastifyInstance } from \"fastify\";\nimport { startTestEnv, stopTestEnv } from \"../helper\";\nimport Knex from 'knex';\n\nlet app: FastifyInstance;\n\n\nbeforeAll(async () => {\n    app = await startTestEnv();\n\n});\n\n\nafterAll(async () => {\n    await stopTestEnv();\n})\n\ndescribe('app initialization test', () => {\n    it('should app register all mocked dependecies', async () => {\n        expect(true).toBe(true);\n    })\n})\n\n\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/helper.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/plugins/knex-plugin.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/app.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/helper.ts",{"fileContent":"import { FastifyInstance } from 'fastify';\n\nlet app: FastifyInstance;\n\nexport async function startTestEnv(): Promise<FastifyInstance> {\n\tconst app = require('../src/app').default;\n\n\tawait app.ready();\n\n\treturn app;\n}\n\nexport async function stopTestEnv(): Promise<void> {\n    await app?.close();\n}\n\nexport function getDefaultKnexPluginParams() {\n\treturn {\n\t\traw: jest.fn(),\n        destroy: jest.fn(),\n        migrate: {\n            latest: jest.fn(),\n        },\n\t\ttable: {},\n\t}\n}","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/app.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/public/public.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/plugins/knex-plugin.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/internal.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/jobs/cron-job.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/app.ts",{"fileContent":"import fastify from \"fastify\";\nimport { getConfig, registerMysqlDatabase } from \"./adapters/mysql-adapter\";\nimport registerPublicRoutes from \"./routes/public/public\";\nimport knexPlugin from \"./plugins/knex-plugin\";\nimport registerInternalRoutes from \"./routes/internal/internal\";\nimport cors from \"@fastify/cors\";\nimport fastifyCron from \"fastify-cron\";\nimport createCronJobs from \"./jobs/cron-job\";\n\nconst f = fastify()\n\nexport default f\n  .register(cors, {\n    origin: \"*\",\n    allowedHeaders: \"GET\",\n  })\n  .register(knexPlugin, getConfig())\n  .register(fastifyCron, { jobs: [] })\n  .register(registerMysqlDatabase)\n  .register(registerInternalRoutes, { prefix: \"internal\" })\n  .register(registerPublicRoutes, { prefix: \"public\" })\n  .register(createCronJobs);\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/public/public.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/plugins/knex-plugin.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/internal.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/jobs/cron-job.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/public/exchange-rates.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/seed-with-data.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/health-check.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/index.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport path from \"path\";\nimport { Knex } from \"knex\";\n\nexport function getConfig() {\n  return {\n    client: \"mysql2\",\n    connection: {\n      host: \"mysql\",\n      user: \"user\",\n      password: \"password\",\n      database: \"db\",\n    },\n  }\n}\n\nexport async function registerMysqlDatabase(\n  app: FastifyInstance\n): Promise<void> {\n  await app.knex.raw(\"SELECT 1\");\n\n  await app.knex.migrate.latest({\n    database: \"db\",\n    directory: path.join(__dirname, \"../migrations\"),\n  });\n}\n\nexport async function withinTransaction<T>({\n  app,\n  callback,\n}: {\n  app: FastifyInstance;\n  callback: (trx: Knex.Transaction) => Promise<T>;\n}): Promise<T> {\n  const trx = await app.knex.transaction();\n\n  try {\n    const data = await callback(trx);\n\n    await trx.commit();\n\n    return data;\n  } catch (err) {\n    await trx.rollback();\n\n    throw new Error(\"database commit failed\");\n  }\n}\n","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/public/public.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport * as exchangeRates from './exchange-rates';\n\nexport default async function registerPublicRoutes(app: FastifyInstance) {\n    app.route(exchangeRates.getExchangeRates);\n    app.route(exchangeRates.getExchangeRatesByCurrency);\n    app.route(exchangeRates.getExchangeRatesCurrencies);\n}","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/public/exchange-rates.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/fxrate-manager.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/currencies-repository.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/public/exchange-rates.ts",{"fileContent":"import {\n  ExchangeRateCurrencyParam,\n  ExchangeRateCurrencyParamSchema,\n  ExchangeRatesQuery,\n  ExchangeRatesQuerySchema,\n  Route,\n} from \"../../entities\";\nimport {\n  getFxRates,\n  getFxRatesByCurrency,\n} from \"../../managers/fxrate-manager\";\nimport { getCurrencies } from \"../../repositories/currencies-repository\";\n\nexport const getExchangeRates: Route<{ Querystring: ExchangeRatesQuery }> = {\n  method: \"GET\",\n  url: \"/exchange-rates\",\n  schema: {\n    querystring: ExchangeRatesQuerySchema,\n  },\n  async handler(req, reply) {\n    const fxRates = await getFxRates(req.server, req.query.latest);\n\n    reply.code(200).send({ data: fxRates, size: fxRates.length });\n  },\n};\n\nexport const getExchangeRatesByCurrency: Route<{\n  Params: ExchangeRateCurrencyParam;\n}> = {\n  method: \"GET\",\n  url: \"/exchange-rates/:currency\",\n  schema: {\n    params: ExchangeRateCurrencyParamSchema,\n  },\n  async handler(req, reply) {\n    if (!req.params.currency) {\n      return reply.code(404).send({ data: [], status: false });\n    }\n\n    const fxRates = await getFxRatesByCurrency(req.server, req.params.currency);\n\n    reply.code(200).send({ data: fxRates, size: fxRates.length });\n  },\n};\n\nexport const getExchangeRatesCurrencies: Route<{}> = {\n  method: \"GET\",\n  url: \"/exchange-rates/currencies\",\n  async handler(req, reply) {\n    const currencies = await getCurrencies(req.server);\n\n    reply.code(200).send({ data: currencies });\n  },\n};\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/fxrate-manager.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/currencies-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/constants.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts",{"fileContent":"export * from './fxrate';\nexport * from './currencies';\nexport * from './routes';","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts",{"fileContent":"import { Static, Type } from \"@sinclair/typebox\";\n\n// interface CcyAmt {\n//   Ccy: string;\n//   Amt: string;\n// }\n// interface Rate {\n//   Tp: String;\n//   Dt: string;\n//   CcyAmt: CcyAmt[];\n// }\n\n// interface ExternalFxRate {\n//   $: { xmlns: string };\n//   FxRate: Rate[];\n// }\n// interface ExternalFxRates {\n//   FxRates: ExternalFxRate;\n// }\n\nexport const CcyAmtSchema = Type.Object({\n  Ccy: Type.String(),\n  Amt: Type.String(),\n})\n\nexport const RateSchema = Type.Object({\n  Tp: Type.String(),\n  Dt: Type.String(),\n  CcyAmt: Type.Array(CcyAmtSchema),\n})\nexport type Rate = Static<typeof RateSchema>\n\nexport const ExternalFxRateSchema = Type.Object({\n  $: Type.Object({ xmlns: Type.String() }),\n  FxRate: Type.Array(RateSchema),\n})\n\nexport const ExternalFxRatesSchemas = Type.Object({\n  FxRates: ExternalFxRateSchema\n})\nexport type ExternalFxRates = Static<typeof ExternalFxRatesSchemas>\n\n\nexport const StucturedFxRatesSchema = Type.Object({\n  source_currency: Type.String(),\n  target_currency: Type.String(),\n  source_rate: Type.String(),\n  target_rate: Type.String(),\n  exchange_date: Type.String(),\n});\n\nexport type StucturedFxRates = Static<typeof StucturedFxRatesSchema>\n\nexport const SourceTargetFxRateMapSchema = Type.Object({\n  date: Type.String(),\n  source_rate: Type.String(),\n  target_rate: Type.String(),\n});\n\nexport type SourceTargetFxRateData = Static<typeof SourceTargetFxRateMapSchema>;\n\nexport const FxRateByDateMapSchema = Type.Record(Type.String(), Type.Array(SourceTargetFxRateMapSchema))\nexport type FxRateByDateData = Static<typeof FxRateByDateMapSchema>\n\nexport const FxRateDataSchemas = Type.Object(Type.String(), FxRateByDateMapSchema)\nexport type FxRateData = Static<typeof FxRateDataSchemas>\n\nexport const FxRatesDbSchema = Type.Object({\n  rates: Type.String(Type.Array(StucturedFxRatesSchema)),\n  posting_date: Type.String(),\n});\nexport type FxRatesDb = Static<typeof FxRatesDbSchema>;\n\nexport const FxRatesJsonSchema = Type.String(FxRateDataSchemas);\nexport type FxRatesJson = Static<typeof FxRatesJsonSchema>;\n\n","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts",{"fileContent":"import { Type, Static } from \"@sinclair/typebox\";\n\nexport const CurrencySchema = Type.String();\n\nexport type Currency = Static<typeof CurrencySchema>;\n","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts",{"fileContent":"import { Type, Static } from \"@sinclair/typebox\";\nimport {\n  RawReplyDefaultExpression,\n  RawRequestDefaultExpression,\n  RawServerDefault,\n  RouteGenericInterface,\n  RouteOptions,\n} from \"fastify\";\n\nexport type Route<Types extends RouteGenericInterface> = RouteOptions<\n  RawServerDefault,\n  RawRequestDefaultExpression,\n  RawReplyDefaultExpression,\n  Types\n>;\n\nexport const SeedFxRatesByDateSchema = Type.Object({\n  date: Type.String(),\n});\nexport type SeedFxRatesByDateQuery = Static<typeof SeedFxRatesByDateSchema>;\n\nexport const ExchangeRateCurrencyParamSchema = Type.Object({\n  currency: Type.String(),\n})\nexport type ExchangeRateCurrencyParam = Static<typeof ExchangeRateCurrencyParamSchema>;\n\nexport const ExchangeRatesQuerySchema = Type.Optional(Type.Object({\n  latest: Type.Optional(Type.Boolean()),\n}));\nexport type ExchangeRatesQuery = Static<typeof ExchangeRatesQuerySchema>;","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/fxrate-manager.ts",{"fileContent":"import _ from \"lodash\";\nimport { FastifyInstance } from \"fastify\";\nimport * as repositories from \"../repositories\";\nimport {\n  FxRateByDateData,\n  FxRatesDb,\n  SourceTargetFxRateData,\n  StucturedFxRates,\n} from \"../entities\";\n\nexport const getFxRates = async (\n  app: FastifyInstance,\n  latest?: boolean,\n): Promise<FxRateByDateData> => {\n  const fxRates: FxRatesDb[] = await repositories.getFxRates(app, latest);\n  const rates: StucturedFxRates[] = fxRates\n    .map((rate) => JSON.parse(rate.rates))\n    .flat();\n\n  return transformData(rates);\n};\n\nexport const getFxRatesByCurrency = async (\n  app: FastifyInstance,\n  currency: string\n): Promise<FxRateByDateData> => {\n  const fxRates: FxRatesDb[] = await repositories.getFxRates(app);\n\n  const rates: StucturedFxRates[] = fxRates\n    .map((rate) => JSON.parse(rate.rates))\n    .flat()\n    .filter((rate) => rate.target_currency === currency);\n\n  return transformData(rates);\n};\n\nfunction transformData(data: StucturedFxRates[]): FxRateByDateData {\n  // Group the data by target_currency\n  const groupedData = _.groupBy(data, \"target_currency\");\n\n  // Map over the grouped data and transform each group\n  const transformedData: { [currency: string]: SourceTargetFxRateData[] } =\n    _.mapValues(groupedData, (group) => {\n      // Remove duplicates based on exchange_date\n      const uniqueGroup = _.uniqBy(group, \"exchange_date\");\n\n      // Transform the group into the desired format\n      return _.map(uniqueGroup, (item) => ({\n        date: item.exchange_date,\n        source_rate: item.source_rate,\n        target_rate: item.target_rate,\n      }));\n    });\n\n  return transformedData;\n}\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/exchange-rate-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/index.ts",{"fileContent":"export * from './exchange-rate-repository';","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/exchange-rate-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/constants.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/datetime.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/exchange-rate-repository.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport { FxRatesDb } from \"../entities\";\nimport { DB_EXCHANGE_RATE_TABLE } from \"../constants\";\nimport { getDateWithoutTime } from \"../utils/datetime\";\n\nexport const saveExchangeRates = async (app: FastifyInstance, exchangeRates: FxRatesDb) => {\n  await app.knex\n    .table(DB_EXCHANGE_RATE_TABLE)\n    .insert(exchangeRates)\n    .onConflict('posting_date')\n    .ignore();\n};\n\nexport const getFxRates = async (app: FastifyInstance, latest?: boolean): Promise<FxRatesDb[]> => {\n  if (latest) {\n    return await app.knex.table(DB_EXCHANGE_RATE_TABLE).select().where({ posting_date: getDateWithoutTime().toISOString()}).first();  \n  }\n\n  return await app.knex.table(DB_EXCHANGE_RATE_TABLE).select();\n};\n\nexport const getFxRatesLatest = async (app: FastifyInstance): Promise<FxRatesDb> => {\n  return await app.knex.table(DB_EXCHANGE_RATE_TABLE).select().where({ posting_date: getDateWithoutTime().toISOString()}).first();\n};\n\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/constants.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/datetime.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/constants.ts",{"fileContent":"export const DB_EXCHANGE_RATE_TABLE = \"exchange_rates\";\nexport const DB_CURRENCIES_TABLE = \"currencies\";\n","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/datetime.ts",{"fileContent":"export const getDateWithoutTime = (date?: string) => {\n  let now = new Date();\n  \n  if (date) {\n    now = new Date(date);\n  }\n\n  now.setHours(0, 0, 0, 0);\n\n  return now;\n};\n","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/currencies-repository.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport { DB_CURRENCIES_TABLE } from \"../constants\";\nimport { Currency } from \"../entities/currencies\";\n\nexport const saveCurrencies = async (\n  app: FastifyInstance,\n  currencies: { currency: Currency }[],\n): Promise<void> => {\n  await app.knex\n    .table(DB_CURRENCIES_TABLE)\n    .insert(currencies)\n    .onConflict(\"currency\")\n    .ignore();\n};\n\nexport const getCurrencies = async (\n  app: FastifyInstance,\n): Promise<Currency[]> => {\n  const rows = await app.knex\n    .table(DB_CURRENCIES_TABLE)\n    .select('currency');\n\n  return rows.map(row => row.currency)\n};\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/constants.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/plugins/knex-plugin.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport fp from \"fastify-plugin\";\nimport Knex = require(\"knex\");\n\ndeclare module \"fastify\" {\n\tinterface FastifyInstance {\n\t\tknex: Knex.Knex;\n\t}\n}\nconst knexPlugin = async (fastify: FastifyInstance, options: any) => {\n\t// TODO: can be configured with pool connection\n\t// const connection  = mysql.createConnection(options);\n\tconst knex = Knex(options);\n\tfastify.decorate(\"knex\", knex);\n\n\tfastify.addHook(\"onClose\", async () => {\n\t\tawait fastify.knex.destroy();\n\t});\n};\n\nexport default fp(knexPlugin, {\n\tname: \"knex\",\n});\n","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/internal.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport { seedExchangeRates, seedExchangeRatesByDate } from \"./seed\";\nimport { healtCheck } from \"./health-check\";\n\nexport default async function registerInternalRoutes(app: FastifyInstance) {\n    app.route(healtCheck);\n    app.route(seedExchangeRates);\n    app.route(seedExchangeRatesByDate);\n}","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/seed.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/health-check.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/seed-manager.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/seed-with-data.ts",{"fileContent":"import { Route, SeedFxRatesByDateQuery, SeedFxRatesByDateSchema } from \"../../entities\";\nimport { populateDbWithCurrency, populateDbWithExchangeRates } from \"../../managers/seed-manager\";\n\nexport const seedExchangeRates: Route<{}> = {\n  method: \"GET\",\n  url: \"/seed\",\n  schema: {},\n  async handler(req, reply) {\n    await populateDbWithExchangeRates(req.server);\n    await populateDbWithCurrency(req.server);\n\n    reply.code(200).send({ status: 'success' })\n  },\n};\n\nexport const seedExchangeRatesByDate: Route<{ Querystring: SeedFxRatesByDateQuery }> = {\n  method: \"GET\",\n  url: \"/seedByDate\",\n  schema: {\n    querystring: SeedFxRatesByDateSchema,\n  },\n  async handler(req, reply) {\n    await populateDbWithExchangeRates(req.server, req.query.date);\n\n    reply.code(200).send({ status: 'success' })\n  },\n};","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/seed-manager.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/exchange-rate-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/datetime.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/currencies-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/xml-to-json.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/seed-manager.ts",{"fileContent":"import { FastifyInstance } from \"fastify/types/instance\";\nimport { withinTransaction } from \"../adapters/mysql-adapter\";\nimport { saveExchangeRates } from \"../repositories/exchange-rate-repository\";\nimport { getDateWithoutTime } from \"../utils/datetime\";\nimport { saveCurrencies } from \"../repositories/currencies-repository\";\nimport xmlToJson from \"../utils/xml-to-json\";\nimport { ExternalFxRates, Rate, StucturedFxRates } from \"../entities\";\n\nconst EXCHNAGE_RATE_URL =\n  \"https://www.lb.lt/webservices/FxRates/FxRates.asmx/getCurrentFxRates\";\n\nconst EXCHNAGE_RATE_BY_DATE_URL =\n  \"https://www.lb.lt/webservices/FxRates/FxRates.asmx/getFxRates\";\n\nexport const populateDbWithExchangeRates = async (\n  app: FastifyInstance,\n  date?: string\n) => {\n  const body = date ? `tp=EU&dt=${date}` : \"tp=EU\";\n  const url = date ? EXCHNAGE_RATE_BY_DATE_URL : EXCHNAGE_RATE_URL;\n\n  const response = await fetch(url, {\n    headers: {\n      \"content-type\": \"application/x-www-form-urlencoded\",\n    },\n    method: \"POST\",\n    body,\n  });\n\n  const xml = await response.text();\n  const exchangeRatesJson = (await xmlToJson(xml)) as ExternalFxRates;\n\n  const fxrates: StucturedFxRates[] = exchangeRatesJson.FxRates.FxRate.map(\n    (rate: Rate) => {\n      const date = rate.Dt;\n      const [source, target] = rate.CcyAmt;\n      const { Ccy: sourceCurreny, Amt: sourceRate } = source;\n      const { Ccy: targetCurrency, Amt: targetRate } = target;\n\n      return {\n        source_currency: sourceCurreny,\n        target_currency: targetCurrency,\n        source_rate: sourceRate,\n        target_rate: targetRate,\n        exchange_date: date,\n      };\n    }\n  );\n  \n  const postingDate = getDateWithoutTime(date).toISOString();\n\n  const defaultEurCurrency = {\n    source_currency: \"EUR\",\n    target_currency: \"EUR\",\n    source_rate: \"1\",\n    target_rate: \"1\",\n    exchange_date: postingDate,\n  };\n\n  fxrates.push(defaultEurCurrency);\n\n  const ratesToSave = {\n    rates: JSON.stringify(fxrates),\n    posting_date: postingDate,\n  };\n\n  await withinTransaction({\n    app,\n    callback: async () => {\n      await saveExchangeRates(app, ratesToSave);\n    },\n  });\n};\n\nexport const populateDbWithCurrency = async (app: FastifyInstance) => {\n  const response = await fetch(EXCHNAGE_RATE_URL, {\n    headers: {\n      \"content-type\": \"application/x-www-form-urlencoded\",\n    },\n    method: \"POST\",\n    body: \"tp=EU\",\n  });\n  const xml = await response.text();\n  const exchangeRatesJson = (await xmlToJson(xml)) as ExternalFxRates;\n\n  const currencies = exchangeRatesJson.FxRates.FxRate.map((rate: Rate) => {\n    const [_, to] = rate.CcyAmt;\n    const { Ccy: currency } = to;\n\n    return {\n      currency,\n    };\n  });\n\n  const uniqueCurrencies = [...new Set(currencies)];\n  uniqueCurrencies.push({ currency: \"EUR\" });\n\n  await saveCurrencies(app, uniqueCurrencies);\n};\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/exchange-rate-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/datetime.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/currencies-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/xml-to-json.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/constants.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/xml-to-json.ts",{"fileContent":"import { parseString } from \"xml2js\";\n\nexport default async (xml: string) => {\n  return new Promise((resolve, reject) => {\n    parseString(xml, { explicitArray: false }, function (error, result) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n","resolvedModuleNames":[]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/health-check.ts",{"fileContent":"import { Route } from \"../../entities\";\n\nexport const healtCheck: Route<{}> = {\n  method: \"GET\",\n  url: \"/health\",\n  schema: {},\n  async handler(req, reply) {\n    reply.code(200).send({ status: \"ok\" });\n  },\n};\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/jobs/cron-job.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport { populateDbWithExchangeRates } from \"../managers\";\n\nexport default async function createCronJobs(app: FastifyInstance) {\n    app.cron.createJob({\n        name: 'fetch-fxrates',\n        cronTime: '1 0 * * *', // Runs every day at 00:01\n        // cronTime: \"*/10 * * * * *\", // Runs every 10 seconds\n        onTick: async () => {\n            await populateDbWithExchangeRates(app);\n        },\n    });\n}\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/fxrate-manager.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/seed-manager.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/index.ts",{"fileContent":"export * from './fxrate-manager'\nexport * from './seed-manager'","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/fxrate-manager.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/seed-manager.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/exchange-rate-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/datetime.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/currencies-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/xml-to-json.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/unit/routes/public/get-exchange-rates-by-currency.test.ts",{"fileContent":"import { FastifyInstance } from \"fastify\";\nimport {\n    getDefaultKnexPluginParams,\n    startTestEnv,\n    stopTestEnv,\n} from \"../../../helper\";\nimport fp from \"fastify-plugin\";\n\nlet app: FastifyInstance;\nlet knex = getDefaultKnexPluginParams();\n\nconst knexPlugin = fp(async (fastify: any, options: any) => {\n    fastify.decorate(\"knex\", knex);\n});\n\njest.mock(\"../../../../src/plugins/knex-plugin\", () => {\n    return knexPlugin;\n});\n\nbeforeAll(async () => {\n    app = await startTestEnv();\n});\n\nbeforeEach(async () => {\n    jest.resetAllMocks();\n});\n\nafterAll(async () => {\n    await stopTestEnv();\n});\n\ndescribe('endpoints /public/exchange-rates calls', () => {\n    describe(\"GET /public/exchange-rates/\", () => {\n        it(\"should response with exchange rates data\", async () => {\n            const data = [\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"117.201880\",\n                    exchange_date: \"2023-01-22\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"116.201880\",\n                    exchange_date: \"2023-01-21\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"115.201880\",\n                    exchange_date: \"2023-01-20\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"JPY\",\n                    source_rate: \"1\",\n                    target_rate: \"120\",\n                    exchange_date: \"2023-01-20\",\n                },\n            ];\n\n            knex.table = () => ({\n                select: () => {\n                    return [{ rates: JSON.stringify(data), posting_date: \"2024-01-20\" }];\n                },\n            });\n\n            const exchangeRates = await app.inject({\n                method: \"GET\",\n                url: \"/public/exchange-rates\",\n            });\n\n            expect(exchangeRates.statusCode).toBe(200);\n            expect(JSON.parse(exchangeRates.body)).toEqual({\n                data: {\n                    RSD: [\n                        { date: '2023-01-22', source_rate: '1', target_rate: '117.201880' },\n                        { date: '2023-01-21', source_rate: '1', target_rate: '116.201880' },\n                        { date: '2023-01-20', source_rate: '1', target_rate: '115.201880' }\n                    ],\n                    JPY: [{ date: '2023-01-20', source_rate: '1', target_rate: '120' }]\n                },\n            });\n        });\n    });\n\n    describe(\"GET /public/exchange-rates/:currency\", () => {\n        it(\"should return 404 not found\", async () => {\n            const exchangeRates = await app.inject({\n                method: \"GET\",\n                url: \"/public/exchange-rates/\",\n            });\n\n            expect(exchangeRates.statusCode).toEqual(404);\n        });\n        it(\"should response exchange rates by currency\", async () => {\n            const data = [\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"117.201880\",\n                    exchange_date: \"2023-01-22\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"116.201880\",\n                    exchange_date: \"2023-01-21\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"RSD\",\n                    source_rate: \"1\",\n                    target_rate: \"115.201880\",\n                    exchange_date: \"2023-01-20\",\n                },\n                {\n                    source_currency: \"EUR\",\n                    target_currency: \"JPY\",\n                    source_rate: \"1\",\n                    target_rate: \"120\",\n                    exchange_date: \"2023-01-20\",\n                },\n            ];\n\n            knex.table = () => ({\n                select: () => {\n                    return [{ rates: JSON.stringify(data), posting_date: \"2024-01-20\" }];\n                },\n            });\n\n            const exchangeRates = await app.inject({\n                method: \"GET\",\n                url: \"/public/exchange-rates/RSD\",\n            });\n\n            expect(exchangeRates.statusCode).toBe(200);\n            expect(JSON.parse(exchangeRates.body)).toEqual({\n                data: {\n                    RSD: [\n                        { date: \"2023-01-22\", source_rate: \"1\", target_rate: \"117.201880\" },\n                        { date: \"2023-01-21\", source_rate: \"1\", target_rate: \"116.201880\" },\n                        { date: \"2023-01-20\", source_rate: \"1\", target_rate: \"115.201880\" },\n                    ],\n                },\n            });\n        });\n    });\n})\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/helper.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/plugins/knex-plugin.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/app.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/test/unit/utils/xml-to-json.test.ts",{"fileContent":"import { describe } from \"node:test\";\nimport xmlToJson from \"../../../src/utils/xml-to-json\";\n\nconst mockData = `\n<FxRates xmlns=\"http://www.lb.lt/WebServices/FxRates\">\n<script/>\n<FxRate>\n<Tp>EU</Tp>\n<Dt>2024-02-23</Dt>\n<CcyAmt>\n<Ccy>EUR</Ccy>\n<Amt>1</Amt>\n</CcyAmt>\n<CcyAmt>\n<Ccy>AUD</Ccy>\n<Amt>1.6467</Amt>\n</CcyAmt>\n</FxRate>\n<FxRate>\n<Tp>EU</Tp>\n<Dt>2024-02-23</Dt>\n<CcyAmt>\n<Ccy>EUR</Ccy>\n<Amt>1</Amt>\n</CcyAmt>\n<CcyAmt>\n<Ccy>BGN</Ccy>\n<Amt>1.9558</Amt>\n</CcyAmt>\n</FxRate>\n</FxRates>\n`;\n\nbeforeEach(async () => {\n});\n\nafterAll(async () => {\n    jest.resetAllMocks();\n})\n\n\ndescribe(\"parse xml to json\", () => {\n    it(\"parsed fx rates xml to json\", async () => {\n        const jsonData = await xmlToJson(mockData);\n        expect(jsonData).toEqual({\n            FxRates: {\n                $: { xmlns: \"http://www.lb.lt/WebServices/FxRates\" },\n                script: \"\",\n                FxRate: [\n                    {\n                        Tp: \"EU\",\n                        Dt: \"2024-02-23\",\n                        CcyAmt: [\n                            { Ccy: \"EUR\", Amt: \"1\" },\n                            { Ccy: \"AUD\", Amt: \"1.6467\" },\n                        ],\n                    },\n                    {\n                        Tp: \"EU\",\n                        Dt: \"2024-02-23\",\n                        CcyAmt: [\n                            { Ccy: \"EUR\", Amt: \"1\" },\n                            { Ccy: \"BGN\", Amt: \"1.9558\" },\n                        ],\n                    },\n                ],\n            },\n        });\n    });\n});\n","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/xml-to-json.ts"]}],["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/routes/internal/seed.ts",{"fileContent":"import { Route, SeedFxRatesByDateQuery, SeedFxRatesByDateSchema } from \"../../entities\";\nimport { populateDbWithCurrency, populateDbWithExchangeRates } from \"../../managers/seed-manager\";\n\nexport const seedExchangeRates: Route<{}> = {\n  method: \"GET\",\n  url: \"/seed\",\n  schema: {},\n  async handler(req, reply) {\n    await populateDbWithExchangeRates(req.server);\n    await populateDbWithCurrency(req.server);\n\n    reply.code(200).send({ status: 'success' })\n  },\n};\n\nexport const seedExchangeRatesByDate: Route<{ Querystring: SeedFxRatesByDateQuery }> = {\n  method: \"GET\",\n  url: \"/seedByDate\",\n  schema: {\n    querystring: SeedFxRatesByDateSchema,\n  },\n  async handler(req, reply) {\n    await populateDbWithExchangeRates(req.server, req.query.date);\n\n    reply.code(200).send({ status: 'success' })\n  },\n};","resolvedModuleNames":["/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/index.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/managers/seed-manager.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/fxrate.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/currencies.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/entities/routes.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/adapters/mysql-adapter.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/exchange-rate-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/datetime.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/repositories/currencies-repository.ts","/Users/kimnaciscionis/git/personal/seb-exchange-rates/src/utils/xml-to-json.ts"]}]]